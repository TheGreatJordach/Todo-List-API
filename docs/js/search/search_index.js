var COMPODOC_SEARCH_INDEX = {
  index: {
    version: "2.3.9",
    fields: ["title", "body"],
    fieldVectors: [
      ["title/modules/AppModule.html", [0, 0.871, 1, 2.149]],
      [
        "body/modules/AppModule.html",
        [
          0, 1.355, 1, 4.241, 2, 1.394, 3, 1.641, 4, 1.965, 5, 1.965, 6, 1.641,
          7, 2.427, 8, 1.965, 9, 2.79, 10, 2.79, 11, 3.181, 12, 0.029, 13,
          3.491, 14, 3.491, 15, 3.491, 16, 3.181, 17, 2.664, 18, 1.965, 19,
          1.791, 20, 0.32, 21, 0.282, 22, 0.282, 23, 3.325, 24, 2.427, 25,
          0.641, 26, 0.816, 27, 3.325, 28, 3.325, 29, 2.79, 30, 3.325, 31, 2.79,
          32, 1.791, 33, 0.32, 34, 0.066, 35, 0.02, 36, 0.02,
        ],
      ],
      ["title/controllers/AuthController.html", [37, 1.941, 38, 2.149]],
      [
        "body/controllers/AuthController.html",
        [
          12, 0.029, 20, 0.309, 21, 0.271, 22, 0.271, 25, 0.586, 26, 0.786, 32,
          1.725, 33, 0.309, 34, 0.063, 35, 0.019, 36, 0.019, 37, 1.894, 38,
          2.875, 39, 2.688, 40, 2.688, 41, 3.203, 42, 0.568, 43, 1.842, 44,
          2.475, 45, 4.394, 46, 4.394, 47, 3.203, 48, 3.453, 49, 1.703, 50,
          3.203, 51, 0.997, 52, 3.203, 53, 1.703, 54, 1.257, 55, 0.848, 56,
          1.703, 57, 1.842, 58, 1.894, 59, 3.203, 60, 2.883, 61, 3.203, 62,
          3.203, 63, 2.688, 64, 2.688, 65, 2.875, 66, 2.688, 67, 2.096, 68,
          2.475, 69, 2.349, 70, 2.688, 71, 3.203, 72, 2.096, 73, 1.15, 74,
          3.203, 75, 3.203, 76, 1.703, 77, 3.203, 78, 3.203, 79, 3.203, 80,
          1.581, 81, 1.356, 82, 1.581, 83, 3.203, 84, 1.455, 85, 1.15, 86,
          1.581, 87, 2.349, 88, 3.203,
        ],
      ],
      ["title/modules/AuthModule.html", [0, 0.871, 11, 1.769]],
      [
        "body/modules/AuthModule.html",
        [
          0, 1.232, 2, 1.165, 3, 1.372, 4, 1.643, 5, 1.643, 6, 1.372, 7, 2.502,
          8, 2.746, 11, 3.373, 12, 0.03, 16, 3.006, 17, 2.352, 18, 1.643, 19,
          1.497, 20, 0.268, 21, 0.236, 22, 0.236, 24, 2.142, 25, 0.667, 26,
          0.682, 29, 2.333, 32, 2.142, 33, 0.268, 34, 0.055, 35, 0.018, 36,
          0.018, 38, 3.039, 68, 2.755, 69, 2.038, 89, 2.333, 90, 2.78, 91,
          2.333, 92, 2.333, 93, 3.166, 94, 3.006, 95, 3.006, 96, 2.78, 97, 2.78,
          98, 2.333, 99, 2.78, 100, 2.78, 101, 2.038, 102, 1.819, 103, 2.333,
          104, 1.643, 105, 2.917, 106, 1.819, 107, 2.333, 108, 2.78, 109, 1.819,
          110, 2.603, 111, 2.78, 112, 2.78, 113, 2.78, 114, 2.603, 115, 2.333,
          116, 1.643, 117, 2.333, 118, 2.78, 119, 2.333, 120, 2.333, 121, 2.78,
          122, 2.78, 123, 2.78,
        ],
      ],
      ["title/injectables/AuthService.html", [68, 1.621, 124, 1.377]],
      [
        "body/injectables/AuthService.html",
        [
          12, 0.03, 20, 0.175, 21, 0.153, 22, 0.153, 25, 0.539, 26, 0.445, 33,
          0.175, 34, 0.036, 35, 0.013, 36, 0.013, 42, 0.321, 43, 1.206, 44,
          2.787, 48, 2.629, 51, 1.075, 53, 1.724, 54, 1.272, 55, 0.913, 56,
          1.724, 57, 1.709, 58, 1.07, 60, 2.337, 65, 1.882, 66, 1.52, 67, 1.185,
          68, 1.42, 70, 1.52, 73, 1.7, 76, 1.835, 80, 2.195, 81, 1.678, 82,
          2.337, 84, 1.851, 85, 1.849, 86, 0.894, 95, 2.673, 98, 1.52, 101,
          1.328, 115, 2.414, 116, 1.07, 124, 1.206, 125, 1.07, 126, 1.52, 127,
          0.888, 128, 3.472, 129, 2.799, 130, 2.877, 131, 2.877, 132, 2.877,
          133, 1.701, 134, 1.811, 135, 2.55, 136, 4.963, 137, 2.877, 138, 2.877,
          139, 1.625, 140, 1.811, 141, 1.07, 142, 2.337, 143, 2.877, 144, 1.811,
          145, 2.877, 146, 1.811, 147, 2.877, 148, 1.811, 149, 1.185, 150,
          2.877, 151, 2.414, 152, 1.52, 153, 2.116, 154, 2.414, 155, 1.811, 156,
          1.185, 157, 0.603, 158, 1.185, 159, 2.41, 160, 4.076, 161, 0.559, 162,
          1.811, 163, 1.811, 164, 2.877, 165, 2.11, 166, 2.877, 167, 1.811, 168,
          1.811, 169, 1.52, 170, 1.811, 171, 2.877, 172, 1.811, 173, 1.328, 174,
          1.811, 175, 1.328, 176, 2.667, 177, 2.414, 178, 1.811, 179, 1.811,
          180, 1.811, 181, 1.811, 182, 1.811, 183, 1.811, 184, 3.579, 185,
          2.625, 186, 1.811, 187, 1.811, 188, 2.877, 189, 1.811, 190, 1.811,
          191, 1.811, 192, 1.52, 193, 1.811, 194, 1.811, 195, 1.52, 196, 1.811,
          197, 1.811,
        ],
      ],
      ["title/classes/BaseTodoDto.html", [34, 0.065, 198, 2.149]],
      [
        "body/classes/BaseTodoDto.html",
        [
          12, 0.029, 20, 0.333, 21, 0.293, 22, 0.293, 25, 0.604, 33, 0.333, 34,
          0.103, 35, 0.02, 36, 0.02, 42, 0.612, 49, 2.021, 51, 1.183, 55, 1.12,
          73, 2.254, 81, 1.883, 127, 1.427, 156, 2.261, 157, 1.15, 161, 1.791,
          198, 3.026, 199, 1.15, 200, 4.672, 201, 2.261, 202, 2.368, 203, 3.823,
          204, 2.865, 205, 3.455, 206, 3.455, 207, 2.9, 208, 3.455, 209, 2.534,
          210, 2.043, 211, 3.882, 212, 2.043, 213, 2.261,
        ],
      ],
      ["title/classes/BaseUserDto.html", [34, 0.065, 214, 1.941]],
      [
        "body/classes/BaseUserDto.html",
        [
          12, 0.029, 20, 0.327, 21, 0.288, 22, 0.288, 25, 0.6, 33, 0.327, 34,
          0.102, 35, 0.02, 36, 0.02, 42, 0.601, 49, 2.003, 51, 1.173, 54, 1.478,
          55, 1.113, 73, 2.246, 127, 1.411, 157, 1.13, 161, 1.78, 199, 1.13,
          204, 2.55, 209, 2.49, 210, 2.007, 211, 3.836, 212, 2.007, 213, 2.221,
          214, 2.702, 215, 4.639, 216, 2.49, 217, 3.381, 218, 3.054, 219, 4.336,
          220, 3.395, 221, 3.395, 222, 2.317, 223, 2.849, 224, 2.462, 225,
          3.395, 226, 2.849, 227, 3.395,
        ],
      ],
      ["title/injectables/BcryptProvider.html", [94, 1.769, 124, 1.377]],
      [
        "body/injectables/BcryptProvider.html",
        [
          12, 0.029, 20, 0.148, 21, 0.13, 22, 0.13, 25, 0.402, 26, 0.377, 33,
          0.148, 34, 0.063, 35, 0.011, 36, 0.011, 42, 0.272, 43, 1.056, 44,
          2.169, 51, 0.928, 53, 1.242, 54, 0.917, 55, 0.618, 56, 1.242, 57,
          1.553, 72, 1.006, 73, 1.666, 76, 0.977, 80, 0.759, 82, 1.581, 84,
          1.145, 85, 1.578, 86, 1.244, 94, 2.366, 116, 1.49, 124, 1.056, 125,
          0.909, 127, 0.778, 128, 3.552, 129, 2.597, 133, 1.49, 139, 1.683, 142,
          2.391, 149, 2.875, 153, 2.418, 158, 2.676, 159, 2.743, 161, 1.665,
          173, 1.848, 175, 1.848, 176, 2.676, 202, 1.683, 224, 1.357, 228, 1.29,
          229, 2.688, 230, 2.424, 231, 3.432, 232, 2.52, 233, 3.705, 234, 3.203,
          235, 4.065, 236, 1.537, 237, 3.785, 238, 2.52, 239, 2.115, 240, 3.705,
          241, 3.203, 242, 2.52, 243, 4.089, 244, 1.649, 245, 2.115, 246, 3.957,
          247, 3.785, 248, 1.537, 249, 3.203, 250, 2.52, 251, 3.65, 252, 3.687,
          253, 3.687, 254, 3.687, 255, 2.52, 256, 2.52, 257, 2.115, 258, 1.537,
          259, 2.115, 260, 2.688, 261, 1.49, 262, 2.115, 263, 3.222, 264, 2.52,
          265, 2.52, 266, 5.015, 267, 2.115, 268, 2.52, 269, 4.089, 270, 1.848,
          271, 2.52, 272, 2.52, 273, 2.52, 274, 2.52, 275, 1.537, 276, 2.52,
          277, 2.52, 278, 1.537, 279, 1.006, 280, 2.999, 281, 1.537, 282, 2.115,
          283, 1.848, 284, 1.537, 285, 1.537, 286, 1.537, 287, 2.115, 288,
          2.115, 289, 2.115, 290, 1.848, 291, 1.29, 292, 1.127, 293, 1.006, 294,
          1.537, 295, 1.537,
        ],
      ],
      ["title/modules/ConfigurationModule.html", [0, 0.871, 13, 1.941]],
      [
        "body/modules/ConfigurationModule.html",
        [
          0, 1.314, 2, 1.61, 7, 2.068, 12, 0.03, 13, 2.93, 20, 0.37, 21, 0.325,
          22, 0.325, 24, 2.068, 25, 0.629, 26, 0.943, 33, 0.37, 34, 0.076, 35,
          0.022, 36, 0.022, 85, 1.379, 224, 3.235, 279, 2.512, 296, 3.84, 297,
          4.957, 298, 3.223, 299, 3.635, 300, 3.84, 301, 4.957, 302, 3.223, 303,
          3.84, 304, 3.84, 305, 3.84, 306, 3.84, 307, 3.223, 308, 3.84, 309,
          3.84, 310, 3.84, 311, 3.84, 312, 3.84, 313, 3.84, 314, 3.223,
        ],
      ],
      ["title/classes/CreateTodoDto.html", [34, 0.065, 315, 1.941]],
      [
        "body/classes/CreateTodoDto.html",
        [
          12, 0.029, 20, 0.37, 21, 0.325, 22, 0.325, 25, 0.417, 33, 0.37, 34,
          0.076, 35, 0.022, 36, 0.022, 42, 0.68, 49, 2.128, 51, 1.246, 55,
          1.059, 73, 2.208, 81, 1.694, 127, 1.53, 161, 1.53, 198, 4.024, 199,
          1.278, 201, 2.512, 202, 2.251, 203, 3.635, 204, 2.447, 207, 3.223,
          315, 2.93, 316, 3.223, 317, 2.447, 318, 4.607, 319, 3.84, 320, 3.84,
          321, 3.84, 322, 2.816, 323, 2.816,
        ],
      ],
      ["title/modules/DatabaseModule.html", [0, 0.871, 14, 1.941]],
      [
        "body/modules/DatabaseModule.html",
        [
          0, 1.378, 2, 1.734, 12, 0.029, 14, 3.072, 20, 0.399, 21, 0.35, 22,
          0.35, 24, 2.799, 25, 0.647, 26, 1.015, 33, 0.399, 34, 0.082, 35,
          0.023, 36, 0.023, 237, 3.811, 279, 2.706, 298, 4.362, 324, 4.135, 325,
          3.033, 326, 2.445, 327, 3.811, 328, 3.811, 329, 4.135, 330, 4.135,
          331, 4.135, 332, 4.135, 333, 4.135, 334, 4.135,
        ],
      ],
      ["title/classes/EnvValidations.html", [34, 0.065, 335, 2.409]],
      [
        "body/classes/EnvValidations.html",
        [
          12, 0.03, 20, 0.219, 21, 0.193, 22, 0.193, 25, 0.536, 26, 0.559, 33,
          0.331, 34, 0.082, 35, 0.015, 36, 0.015, 42, 0.403, 49, 2.281, 51,
          1.335, 55, 1.135, 76, 0.882, 80, 2.041, 84, 1.034, 85, 1.233, 104,
          1.345, 127, 1.06, 129, 2.03, 139, 2.36, 153, 2.03, 161, 1.923, 199,
          0.757, 204, 3.076, 209, 1.669, 210, 1.345, 212, 1.345, 213, 1.489,
          224, 1.226, 244, 2.247, 290, 1.669, 293, 1.489, 314, 1.91, 335, 2.518,
          336, 1.669, 337, 4.135, 338, 4.135, 339, 4.135, 340, 4.135, 341,
          4.135, 342, 4.135, 343, 4.135, 344, 4.135, 345, 4.135, 346, 4.135,
          347, 4.135, 348, 3.53, 349, 2.276, 350, 2.276, 351, 2.276, 352, 2.276,
          353, 2.276, 354, 2.276, 355, 2.276, 356, 2.276, 357, 2.276, 358,
          2.276, 359, 2.276, 360, 2.276, 361, 2.276, 362, 2.276, 363, 1.489,
          364, 1.91, 365, 1.91, 366, 1.91, 367, 1.91, 368, 2.276, 369, 3.434,
          370, 2.276, 371, 2.276, 372, 2.276, 373, 2.276, 374, 2.276, 375,
          2.276, 376, 1.669, 377, 2.276, 378, 2.276, 379, 1.91, 380, 2.276, 381,
          1.91, 382, 2.276,
        ],
      ],
      ["title/interfaces/HashAlgoInterface.html", [230, 2.149, 383, 2.149]],
      [
        "body/interfaces/HashAlgoInterface.html",
        [
          12, 0.029, 20, 0.36, 21, 0.317, 22, 0.317, 33, 0.36, 35, 0.021, 36,
          0.021, 42, 0.662, 43, 2.041, 51, 1.105, 53, 1.888, 54, 1.393, 55,
          0.939, 56, 1.888, 57, 2.041, 142, 2.834, 158, 3.186, 161, 1.967, 230,
          3.186, 235, 4.087, 245, 4.087, 246, 4.477, 247, 3.973, 251, 3.186,
          257, 4.087, 383, 2.444, 384, 3.736, 385, 4.547, 386, 3.135, 387,
          3.736, 388, 3.736,
        ],
      ],
      ["title/classes/IdDto.html", [34, 0.065, 389, 2.409]],
      [
        "body/classes/IdDto.html",
        [
          12, 0.029, 20, 0.415, 21, 0.365, 22, 0.365, 25, 0.467, 33, 0.415, 34,
          0.085, 35, 0.023, 36, 0.023, 42, 0.762, 49, 1.668, 51, 0.976, 55,
          0.83, 73, 2.077, 127, 1.644, 139, 2.419, 141, 3.42, 199, 1.432, 348,
          3.785, 363, 2.814, 364, 3.61, 389, 3.906, 390, 4.47, 391, 3.61, 392,
          4.301, 393, 4.301,
        ],
      ],
      ["title/classes/JwtAuthGuard.html", [34, 0.065, 93, 1.769]],
      [
        "body/classes/JwtAuthGuard.html",
        [
          12, 0.029, 20, 0.373, 21, 0.328, 22, 0.328, 25, 0.541, 26, 0.95, 33,
          0.373, 34, 0.077, 35, 0.022, 36, 0.022, 42, 0.686, 43, 2.089, 51,
          0.878, 53, 1.501, 54, 1.107, 56, 1.501, 57, 1.622, 58, 2.288, 65,
          3.26, 76, 1.501, 81, 1.858, 84, 1.758, 85, 1.39, 86, 1.91, 87, 2.839,
          93, 2.684, 106, 3.26, 109, 2.532, 199, 1.288, 317, 2.459, 394, 3.26,
          395, 3.248, 396, 4.983, 397, 4.983, 398, 4.983, 399, 3.87, 400, 4.983,
          401, 3.87,
        ],
      ],
      ["title/classes/JwtStrategy.html", [34, 0.065, 110, 2.149]],
      [
        "body/classes/JwtStrategy.html",
        [
          12, 0.03, 20, 0.306, 21, 0.269, 22, 0.269, 25, 0.632, 26, 0.779, 33,
          0.306, 34, 0.063, 35, 0.019, 36, 0.019, 42, 0.562, 43, 1.829, 44,
          2.462, 51, 0.99, 53, 1.692, 54, 1.249, 55, 0.842, 56, 1.692, 57, 1.33,
          65, 2.855, 68, 2.874, 69, 2.326, 72, 2.075, 73, 1.139, 76, 1.23, 80,
          1.566, 81, 1.739, 82, 1.566, 84, 1.441, 85, 1.139, 86, 1.566, 87,
          2.326, 102, 2.075, 103, 2.662, 104, 1.875, 105, 2.326, 109, 2.075,
          110, 2.855, 114, 2.075, 117, 2.662, 120, 2.662, 133, 1.875, 142,
          2.154, 156, 2.075, 157, 1.056, 185, 2.326, 192, 2.662, 199, 1.056,
          307, 3.662, 317, 2.154, 394, 3.264, 402, 2.662, 403, 4.364, 404,
          3.172, 405, 3.172, 406, 4.364, 407, 3.172, 408, 3.172, 409, 3.172,
          410, 3.172, 411, 3.172, 412, 3.172, 413, 3.172, 414, 3.172,
        ],
      ],
      ["title/classes/LoginDto.html", [34, 0.065, 48, 1.941]],
      [
        "body/classes/LoginDto.html",
        [
          12, 0.028, 20, 0.432, 21, 0.38, 22, 0.38, 25, 0.593, 33, 0.432, 34,
          0.089, 35, 0.024, 36, 0.024, 48, 3.229, 54, 1.563, 60, 2.212, 67,
          2.932, 199, 1.491, 218, 3.229, 317, 2.696, 415, 3.76, 416, 5.461, 417,
          4.481, 418, 2.932, 419, 2.932, 420, 3.76,
        ],
      ],
      ["title/injectables/PasswordProvider.html", [95, 1.769, 124, 1.377]],
      [
        "body/injectables/PasswordProvider.html",
        [
          12, 0.029, 20, 0.244, 21, 0.215, 22, 0.215, 25, 0.403, 26, 0.622, 33,
          0.244, 34, 0.05, 35, 0.016, 36, 0.016, 42, 0.449, 43, 1.558, 44,
          2.668, 51, 1, 53, 1.708, 54, 1.261, 55, 0.85, 56, 1.708, 57, 1.847,
          58, 1.497, 72, 1.657, 73, 0.909, 76, 1.441, 82, 1.835, 94, 2.614, 95,
          2.002, 124, 1.558, 125, 1.497, 133, 1.497, 142, 2.552, 153, 1.497,
          158, 2.432, 161, 1.835, 176, 3.383, 202, 1.15, 229, 3.12, 231, 2.125,
          246, 4.288, 247, 3.56, 251, 3.826, 252, 3.12, 253, 3.12, 254, 4.074,
          259, 3.12, 260, 3.12, 261, 2.198, 262, 3.12, 263, 3.964, 270, 2.726,
          280, 1.857, 282, 4.074, 283, 1.857, 291, 2.125, 292, 1.857, 293,
          1.657, 421, 2.125, 422, 3.718, 423, 3.718, 424, 2.532, 425, 2.532,
          426, 3.718, 427, 2.532, 428, 3.718, 429, 2.532, 430, 3.718, 431,
          3.718, 432, 4.854, 433, 3.718, 434, 3.718, 435, 3.718, 436, 2.532,
          437, 2.532, 438, 2.532,
        ],
      ],
      ["title/classes/SignUpDto.html", [34, 0.065, 60, 1.621]],
      [
        "body/classes/SignUpDto.html",
        [
          12, 0.029, 20, 0.285, 21, 0.251, 22, 0.251, 25, 0.451, 33, 0.285, 34,
          0.082, 35, 0.018, 36, 0.018, 42, 0.524, 49, 2.022, 51, 1.183, 54,
          1.19, 55, 1.006, 60, 2.052, 73, 2.18, 86, 2.052, 127, 1.283, 139,
          1.888, 159, 3.248, 161, 1.609, 199, 0.985, 204, 1.46, 212, 1.749, 214,
          3.368, 217, 2.72, 218, 2.458, 219, 2.483, 222, 1.24, 223, 2.483, 224,
          1.593, 317, 2.052, 318, 4.034, 322, 2.17, 439, 3.489, 440, 2.483, 441,
          2.958, 442, 5.214, 443, 4.157, 444, 5.013, 445, 4.157, 446, 4.157,
          447, 4.157, 448, 4.157, 449, 4.157, 450, 4.157, 451, 4.157, 452,
          4.157, 453, 4.157, 454, 4.157, 455, 3.489, 456, 4.157, 457, 2.958,
          458, 2.958, 459, 2.958, 460, 2.958, 461, 2.483, 462, 4.157, 463,
          2.958,
        ],
      ],
      ["title/entities/Todo.html", [157, 1.093, 222, 1.377]],
      [
        "body/entities/Todo.html",
        [
          12, 0.029, 20, 0.326, 21, 0.287, 22, 0.287, 25, 0.495, 33, 0.326, 34,
          0.067, 35, 0.02, 36, 0.02, 42, 0.599, 49, 2.14, 51, 1.253, 55, 1.065,
          81, 1.929, 127, 1.407, 139, 2.071, 141, 3.049, 156, 2.213, 157, 1.518,
          161, 1.703, 202, 2.343, 203, 3.783, 222, 1.911, 464, 2.213, 465,
          4.836, 466, 2.481, 467, 4.836, 468, 2.839, 469, 4.329, 470, 2.839,
          471, 2.839, 472, 3.383, 473, 4.559, 474, 4.559, 475, 4.559, 476,
          2.839, 477, 4.559, 478, 2.213, 479, 3.383,
        ],
      ],
      ["title/controllers/TodoListController.html", [37, 1.941, 480, 2.149]],
      [
        "body/controllers/TodoListController.html",
        [
          12, 0.029, 20, 0.36, 21, 0.317, 22, 0.317, 25, 0.588, 26, 0.917, 32,
          2.012, 33, 0.36, 34, 0.074, 35, 0.021, 36, 0.021, 37, 2.208, 40,
          3.135, 42, 0.662, 43, 2.041, 49, 1.448, 51, 0.848, 53, 1.448, 54,
          1.069, 55, 0.721, 56, 1.448, 57, 1.566, 63, 3.135, 64, 4.547, 76,
          1.448, 85, 1.341, 93, 2.012, 106, 2.444, 107, 3.135, 114, 2.444, 161,
          1.153, 165, 2.74, 218, 2.208, 222, 1.566, 315, 3.609, 323, 2.74, 394,
          2.444, 480, 3.186, 481, 3.135, 482, 4.87, 483, 3.736, 484, 3.736, 485,
          3.736, 486, 3.736, 487, 3.736, 488, 3.736, 489, 3.736, 490, 3.736,
          491, 3.736, 492, 3.736, 493, 3.736,
        ],
      ],
      ["title/modules/TodosModule.html", [0, 0.871, 15, 1.941]],
      [
        "body/modules/TodosModule.html",
        [
          0, 1.45, 2, 1.597, 3, 1.88, 4, 2.252, 5, 2.252, 6, 1.88, 7, 2.052, 8,
          2.252, 11, 3.306, 12, 0.029, 15, 3.628, 17, 2.916, 18, 2.252, 19,
          2.052, 20, 0.367, 21, 0.323, 22, 0.323, 24, 2.656, 25, 0.65, 26,
          0.935, 31, 3.197, 32, 2.656, 33, 0.367, 34, 0.075, 35, 0.022, 36,
          0.022, 157, 1.268, 222, 1.597, 325, 2.794, 326, 2.252, 480, 3.578,
          494, 3.809, 495, 3.809, 496, 3.809, 497, 3.809, 498, 3.809, 499,
          3.809,
        ],
      ],
      ["title/classes/UpdateTodoDto.html", [34, 0.065, 500, 2.409]],
      [
        "body/classes/UpdateTodoDto.html",
        [
          12, 0.029, 20, 0.438, 21, 0.385, 22, 0.385, 25, 0.598, 33, 0.438, 34,
          0.09, 35, 0.024, 36, 0.024, 165, 3.332, 199, 1.512, 201, 2.973, 315,
          2.686, 317, 2.719, 323, 3.332, 418, 2.973, 419, 2.973, 500, 4.04, 501,
          3.813, 502, 5.508, 503, 3.813,
        ],
      ],
      ["title/classes/UpdateUserDto.html", [34, 0.065, 504, 2.409]],
      [
        "body/classes/UpdateUserDto.html",
        [
          12, 0.029, 20, 0.438, 21, 0.385, 22, 0.385, 25, 0.598, 33, 0.438, 34,
          0.09, 35, 0.024, 36, 0.024, 199, 1.512, 214, 2.686, 216, 3.332, 317,
          2.719, 322, 3.332, 418, 2.973, 419, 2.973, 461, 3.813, 503, 3.813,
          504, 4.04, 505, 3.813, 506, 5.508,
        ],
      ],
      ["title/entities/User.html", [81, 1.014, 157, 1.093]],
      [
        "body/entities/User.html",
        [
          12, 0.029, 20, 0.313, 21, 0.275, 22, 0.275, 25, 0.481, 33, 0.313, 34,
          0.064, 35, 0.02, 36, 0.02, 42, 0.575, 49, 2.203, 51, 1.289, 54, 1.445,
          55, 1.096, 81, 1.368, 127, 1.368, 139, 2.014, 141, 2.985, 157, 1.476,
          159, 2.985, 161, 1.81, 217, 3.304, 218, 2.985, 222, 2.458, 224, 2.388,
          226, 2.725, 464, 2.124, 466, 2.381, 467, 4.922, 468, 2.725, 469,
          4.238, 470, 2.725, 471, 2.725, 476, 2.725, 478, 2.124, 507, 4.922,
          508, 3.246, 509, 3.246, 510, 4.434, 511, 3.246, 512, 4.434, 513,
          3.246, 514, 3.246,
        ],
      ],
      ["title/injectables/UserService.html", [124, 1.377, 135, 1.769]],
      [
        "body/injectables/UserService.html",
        [
          12, 0.03, 20, 0.156, 21, 0.137, 22, 0.137, 25, 0.455, 26, 0.396, 33,
          0.156, 34, 0.032, 35, 0.012, 36, 0.012, 42, 0.286, 43, 1.099, 44,
          2.701, 51, 1.02, 53, 1.627, 54, 1.201, 55, 0.809, 56, 1.627, 57,
          1.759, 58, 0.954, 60, 2.436, 67, 1.056, 73, 1.37, 76, 1.743, 80,
          1.635, 81, 1.821, 82, 1.883, 84, 2.042, 85, 1.998, 86, 1.295, 116,
          0.954, 124, 1.099, 125, 0.954, 127, 0.809, 128, 2.798, 129, 2.255,
          133, 1.551, 135, 1.413, 139, 1.733, 141, 2.255, 142, 2.436, 149,
          1.056, 151, 3.202, 152, 1.355, 153, 2.255, 154, 2.78, 157, 0.537, 161,
          1.387, 169, 1.355, 173, 2.798, 175, 2.798, 176, 3.432, 177, 2.78, 185,
          1.924, 202, 0.733, 217, 2.746, 239, 2.201, 251, 1.716, 261, 2.255,
          267, 2.201, 270, 1.924, 280, 1.184, 283, 2.43, 287, 1.355, 288, 3.522,
          289, 1.355, 290, 1.924, 292, 1.184, 293, 1.056, 326, 0.954, 376,
          1.184, 420, 2.201, 478, 1.056, 515, 1.355, 516, 2.623, 517, 2.623,
          518, 2.623, 519, 2.623, 520, 1.614, 521, 3.202, 522, 2.623, 523,
          2.623, 524, 2.623, 525, 1.614, 526, 2.201, 527, 2.623, 528, 3.815,
          529, 2.623, 530, 2.623, 531, 3.313, 532, 2.623, 533, 2.201, 534,
          2.623, 535, 2.623, 536, 2.623, 537, 2.623, 538, 2.623, 539, 1.614,
          540, 2.623, 541, 1.614, 542, 2.623, 543, 1.614, 544, 2.623, 545,
          1.614, 546, 1.355, 547, 4.196, 548, 1.614, 549, 1.614, 550, 1.614,
          551, 1.614, 552, 1.614, 553, 1.614, 554, 1.614, 555, 1.614, 556,
          1.614, 557, 1.614, 558, 1.614, 559, 2.623, 560, 1.614, 561, 1.614,
          562, 2.623, 563, 2.623, 564, 1.614, 565, 2.623, 566, 1.614, 567,
          1.614, 568, 2.623, 569, 1.614,
        ],
      ],
      ["title/modules/UsersModule.html", [0, 0.871, 16, 1.769]],
      [
        "body/modules/UsersModule.html",
        [
          0, 1.442, 2, 1.578, 3, 1.858, 4, 2.226, 5, 2.226, 6, 1.858, 7, 2.929,
          8, 3.215, 12, 0.029, 16, 3.355, 17, 2.893, 18, 2.226, 19, 2.028, 20,
          0.363, 21, 0.319, 22, 0.319, 24, 2.028, 25, 0.625, 26, 0.924, 33,
          0.363, 34, 0.075, 35, 0.022, 36, 0.022, 81, 1.162, 135, 3.515, 157,
          1.253, 325, 2.761, 326, 2.226, 546, 3.16, 570, 3.16, 571, 3.16, 572,
          3.16, 573, 3.765, 574, 3.765, 575, 3.765,
        ],
      ],
      ["title/coverage.html", [576, 3.278]],
      [
        "body/coverage.html",
        [
          0, 0.67, 6, 1.246, 12, 0.029, 22, 0.214, 34, 0.119, 35, 0.016, 36,
          0.016, 37, 2.194, 38, 1.652, 39, 2.119, 48, 1.493, 55, 0.487, 60,
          1.246, 68, 1.246, 81, 0.779, 85, 0.907, 93, 1.36, 94, 1.36, 95, 1.36,
          102, 1.652, 106, 1.652, 110, 1.652, 124, 2.032, 126, 2.119, 135, 1.36,
          157, 1.235, 198, 1.652, 200, 2.119, 201, 2.878, 204, 1.246, 210,
          1.493, 214, 1.493, 215, 2.119, 216, 2.721, 222, 1.059, 228, 2.119,
          230, 1.652, 299, 1.852, 315, 1.493, 316, 2.119, 327, 1.852, 328,
          1.852, 335, 1.852, 336, 2.721, 348, 1.652, 363, 1.652, 365, 4.069,
          376, 4.789, 383, 1.652, 385, 2.119, 386, 2.119, 389, 1.852, 390,
          2.119, 391, 2.119, 394, 2.428, 395, 2.119, 402, 2.119, 415, 2.119,
          421, 2.119, 439, 2.119, 440, 2.119, 465, 2.119, 466, 2.721, 480,
          1.652, 481, 2.119, 500, 1.852, 501, 2.119, 504, 1.852, 505, 2.119,
          507, 2.119, 515, 2.119, 576, 1.852, 577, 2.119, 578, 2.525, 579,
          2.525, 580, 4.399, 581, 2.525, 582, 4.399, 583, 2.525, 584, 2.525,
          585, 2.525, 586, 2.525, 587, 2.119, 588, 2.119, 589, 6.154, 590,
          2.119, 591, 2.119, 592, 3.114, 593, 3.114, 594, 4.848, 595, 2.525,
          596, 2.119, 597, 2.119, 598, 2.721, 599, 4.399, 600, 2.525, 601,
          2.525, 602, 2.525, 603, 2.525, 604, 2.525,
        ],
      ],
      ["title/dependencies.html", [3, 1.948, 605, 2.307]],
      [
        "body/dependencies.html",
        [
          3, 1.687, 12, 0.03, 26, 0.839, 34, 0.091, 35, 0.02, 36, 0.02, 101,
          2.507, 105, 3.368, 109, 2.237, 114, 2.237, 212, 2.021, 213, 2.237,
          263, 2.507, 279, 2.237, 302, 2.869, 326, 2.021, 418, 2.237, 419,
          2.237, 478, 2.237, 606, 3.419, 607, 3.419, 608, 5.185, 609, 3.419,
          610, 3.419, 611, 3.419, 612, 3.419, 613, 3.419, 614, 2.869, 615,
          3.419, 616, 3.419, 617, 3.419, 618, 3.419, 619, 3.419, 620, 3.419,
          621, 3.419, 622, 5.954, 623, 5.185, 624, 3.419, 625, 3.419, 626,
          3.419, 627, 3.419, 628, 3.419, 629, 3.419, 630, 3.419, 631, 3.419,
          632, 3.419, 633, 4.592, 634, 2.869, 635, 3.419, 636, 3.419, 637,
          3.419, 638, 3.419, 639, 3.419, 640, 3.419, 641, 3.419, 642, 3.419,
          643, 3.419, 644, 3.419, 645, 3.419, 646, 3.419, 647, 3.419, 648,
          3.419,
        ],
      ],
      ["title/miscellaneous/functions.html", [649, 1.799, 650, 3.312]],
      [
        "body/miscellaneous/functions.html",
        [
          6, 2.757, 12, 0.027, 35, 0.022, 36, 0.022, 42, 0.706, 53, 2.165, 54,
          1.598, 55, 1.077, 56, 2.165, 104, 2.354, 204, 2.505, 210, 3, 299,
          3.721, 336, 2.92, 348, 3.32, 363, 3.32, 366, 3.342, 367, 4.259, 587,
          3.342, 588, 4.259, 590, 3.342, 591, 4.259, 598, 2.92, 649, 2.606, 650,
          3.342, 651, 3.342, 652, 3.982, 653, 3.982, 654, 3.982, 655, 3.982,
          656, 6.21, 657, 5.074, 658, 3.982,
        ],
      ],
      ["title/index.html", [42, 0.487, 659, 2.307, 660, 2.307]],
      [
        "body/index.html",
        [
          12, 0.029, 21, 0.292, 35, 0.02, 36, 0.02, 202, 1.564, 455, 4.367, 521,
          2.89, 576, 2.525, 634, 5.008, 661, 3.443, 662, 3.443, 663, 4.614, 664,
          3.443, 665, 3.443, 666, 3.443, 667, 3.443, 668, 3.443, 669, 3.443,
          670, 5.204, 671, 3.443, 672, 3.443, 673, 3.443, 674, 6.094, 675,
          3.443, 676, 3.443, 677, 3.443, 678, 3.443, 679, 3.443, 680, 4.614,
          681, 3.443, 682, 3.443, 683, 3.443, 684, 3.443, 685, 4.614, 686,
          4.614, 687, 3.443, 688, 3.443, 689, 3.443, 690, 3.384, 691, 4.614,
          692, 3.443, 693, 3.443, 694, 3.443, 695, 3.443, 696, 3.443, 697, 2.89,
          698, 3.443, 699, 3.443, 700, 3.443, 701, 3.443, 702, 3.443, 703,
          3.443, 704, 3.443, 705, 3.443, 706, 3.443, 707, 3.443, 708, 2.89, 709,
          3.443, 710, 3.443, 711, 3.443, 712, 3.443, 713, 3.443, 714, 3.443,
          715, 2.253,
        ],
      ],
      ["title/license.html", [659, 2.307, 660, 2.307, 715, 1.799]],
      [
        "body/license.html",
        [
          12, 0.02, 19, 1.868, 35, 0.02, 36, 0.02, 261, 2.05, 526, 2.91, 577,
          2.91, 614, 2.91, 690, 2.543, 715, 2.269, 716, 5.223, 717, 3.468, 718,
          3.468, 719, 2.91, 720, 2.91, 721, 4.636, 722, 3.468, 723, 3.468, 724,
          3.468, 725, 3.468, 726, 3.468, 727, 3.468, 728, 4.636, 729, 6.282,
          730, 3.468, 731, 3.468, 732, 3.468, 733, 5.223, 734, 3.468, 735,
          4.636, 736, 3.468, 737, 3.468, 738, 4.636, 739, 3.468, 740, 3.468,
          741, 3.468, 742, 3.468, 743, 3.468, 744, 3.468, 745, 3.468, 746,
          4.636, 747, 3.468, 748, 3.468, 749, 3.468, 750, 3.468, 751, 3.468,
          752, 3.468, 753, 3.468, 754, 4.636, 755, 4.636, 756, 3.468, 757,
          3.468, 758, 3.468, 759, 3.468, 760, 3.468, 761, 3.468, 762, 3.468,
          763, 3.468, 764, 3.468, 765, 3.468, 766, 3.468, 767, 3.468, 768,
          3.468, 769, 3.468, 770, 3.468, 771, 3.468, 772, 3.468, 773, 3.468,
          774, 3.468, 775, 3.468, 776, 3.468, 777, 3.468, 778, 3.468, 779,
          3.468, 780, 3.468, 781, 2.91, 782, 3.468,
        ],
      ],
      ["title/modules.html", [2, 1.873]],
      [
        "body/modules.html",
        [
          1, 2.945, 2, 1.887, 11, 2.425, 12, 0.024, 13, 2.661, 14, 2.661, 15,
          2.661, 16, 2.425, 35, 0.024, 36, 0.024, 697, 5.155, 783, 6.142, 784,
          6.142, 785, 6.401, 786, 5.477, 787, 5.477,
        ],
      ],
      ["title/overview.html", [788, 3.751]],
      [
        "body/overview.html",
        [
          0, 0.873, 1, 4.183, 2, 1.379, 3, 1.624, 4, 1.945, 5, 1.945, 6, 1.624,
          7, 1.772, 8, 1.945, 9, 2.762, 10, 2.762, 11, 3.466, 12, 0.029, 13,
          3.006, 14, 3.006, 15, 3.374, 16, 3.244, 17, 2.646, 18, 1.945, 19,
          1.772, 32, 1.772, 35, 0.02, 36, 0.02, 68, 2.51, 89, 2.762, 91, 2.762,
          92, 2.762, 93, 2.939, 94, 2.739, 95, 2.739, 125, 1.945, 135, 3.244,
          199, 1.095, 383, 2.153, 444, 2.762, 464, 2.153, 570, 2.762, 571,
          2.762, 572, 2.762, 788, 2.762, 789, 3.291, 790, 4.475, 791, 3.291,
          792, 3.291,
        ],
      ],
      ["title/properties.html", [127, 1.218, 605, 2.307]],
      [
        "body/properties.html",
        [
          12, 0.028, 35, 0.025, 36, 0.025, 127, 1.45, 202, 2.134, 690, 3.446,
          708, 3.943, 715, 3.074, 719, 3.943, 720, 3.943, 793, 4.698, 794,
          4.698, 795, 4.698, 796, 4.698, 797, 4.698, 798, 4.698, 799, 4.698,
          800, 4.698, 801, 4.698,
        ],
      ],
      ["title/miscellaneous/variables.html", [244, 2.582, 649, 1.799]],
      [
        "body/miscellaneous/variables.html",
        [
          0, 1.184, 12, 0.029, 35, 0.02, 36, 0.02, 42, 0.581, 44, 2.204, 55,
          0.979, 76, 1.271, 80, 2.204, 81, 1.012, 82, 1.619, 84, 1.489, 85,
          1.823, 102, 2.921, 104, 1.939, 116, 3.001, 119, 2.752, 129, 1.939,
          142, 1.619, 149, 3.321, 159, 1.939, 195, 2.752, 222, 1.375, 237,
          3.274, 244, 2.146, 261, 2.639, 327, 3.274, 328, 3.274, 379, 2.752,
          381, 2.752, 464, 2.146, 533, 2.752, 592, 2.752, 593, 4.26, 596, 2.752,
          597, 3.747, 598, 2.405, 649, 2.146, 651, 2.752, 781, 2.752, 802,
          4.465, 803, 3.279, 804, 3.279, 805, 3.279, 806, 3.279, 807, 3.279,
          808, 3.279, 809, 3.279, 810, 3.279, 811, 5.076, 812, 3.279, 813,
          3.279, 814, 3.279, 815, 3.279, 816, 3.279, 817, 5.076, 818, 3.279,
          819, 3.279, 820, 3.279, 821, 3.279, 822, 4.465, 823, 3.279, 824,
          3.279, 825, 3.279, 826, 3.279, 827, 3.279, 828, 3.279, 829, 3.279,
        ],
      ],
    ],
    invertedIndex: [
      [
        "",
        {
          _index: 12,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "0",
        {
          _index: 376,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["0.0.1", { _index: 794, title: {}, body: { "properties.html": {} } }],
      ["0.14.1", { _index: 618, title: {}, body: { "dependencies.html": {} } }],
      ["0.2.0", { _index: 633, title: {}, body: { "dependencies.html": {} } }],
      ["0.3.20", { _index: 640, title: {}, body: { "dependencies.html": {} } }],
      ["0.5.1", { _index: 617, title: {}, body: { "dependencies.html": {} } }],
      ["0.7.0", { _index: 627, title: {}, body: { "dependencies.html": {} } }],
      ["0/1", { _index: 589, title: {}, body: { "coverage.html": {} } }],
      ["0/12", { _index: 595, title: {}, body: { "coverage.html": {} } }],
      ["0/2", { _index: 582, title: {}, body: { "coverage.html": {} } }],
      ["0/3", { _index: 580, title: {}, body: { "coverage.html": {} } }],
      ["0/4", { _index: 599, title: {}, body: { "coverage.html": {} } }],
      ["0/5", { _index: 600, title: {}, body: { "coverage.html": {} } }],
      ["0/7", { _index: 581, title: {}, body: { "coverage.html": {} } }],
      [
        "1",
        {
          _index: 444,
          title: {},
          body: { "classes/SignUpDto.html": {}, "overview.html": {} },
        },
      ],
      ["1.1.25", { _index: 607, title: {}, body: { "dependencies.html": {} } }],
      ["1.37.0", { _index: 626, title: {}, body: { "dependencies.html": {} } }],
      ["1/4", { _index: 586, title: {}, body: { "coverage.html": {} } }],
      ["1/7", { _index: 602, title: {}, body: { "coverage.html": {} } }],
      ["10.0.0", { _index: 608, title: {}, body: { "dependencies.html": {} } }],
      ["10.0.2", { _index: 615, title: {}, body: { "dependencies.html": {} } }],
      ["10.0.3", { _index: 612, title: {}, body: { "dependencies.html": {} } }],
      ["10.2.0", { _index: 610, title: {}, body: { "dependencies.html": {} } }],
      ["100", { _index: 583, title: {}, body: { "coverage.html": {} } }],
      ["11", { _index: 792, title: {}, body: { "overview.html": {} } }],
      ["14", { _index: 601, title: {}, body: { "coverage.html": {} } }],
      ["2", { _index: 790, title: {}, body: { "overview.html": {} } }],
      ["2.0.5", { _index: 611, title: {}, body: { "dependencies.html": {} } }],
      ["2024", { _index: 718, title: {}, body: { "license.html": {} } }],
      ["25", { _index: 585, title: {}, body: { "coverage.html": {} } }],
      ["3.0.0", { _index: 648, title: {}, body: { "dependencies.html": {} } }],
      ["3.2.3", { _index: 609, title: {}, body: { "dependencies.html": {} } }],
      ["37.6.0", { _index: 642, title: {}, body: { "dependencies.html": {} } }],
      ["4", { _index: 791, title: {}, body: { "overview.html": {} } }],
      ["4.0.1", { _index: 628, title: {}, body: { "dependencies.html": {} } }],
      ["5.1.1", { _index: 616, title: {}, body: { "dependencies.html": {} } }],
      ["5.1.4", { _index: 645, title: {}, body: { "dependencies.html": {} } }],
      ["5.3.10", { _index: 639, title: {}, body: { "dependencies.html": {} } }],
      ["5.95.0", { _index: 643, title: {}, body: { "dependencies.html": {} } }],
      ["6", { _index: 789, title: {}, body: { "overview.html": {} } }],
      ["6/6", { _index: 584, title: {}, body: { "coverage.html": {} } }],
      ["7.8.1", { _index: 637, title: {}, body: { "dependencies.html": {} } }],
      ["8", { _index: 442, title: {}, body: { "classes/SignUpDto.html": {} } }],
      ["8.13.0", { _index: 630, title: {}, body: { "dependencies.html": {} } }],
      ["9.0.2", { _index: 624, title: {}, body: { "dependencies.html": {} } }],
      ["above", { _index: 753, title: {}, body: { "license.html": {} } }],
      [
        "access",
        {
          _index: 242,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      ["action", { _index: 777, title: {}, body: { "license.html": {} } }],
      [
        "actually",
        {
          _index: 431,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "additional",
        {
          _index: 434,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "against",
        {
          _index: 255,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "algo.interface",
        {
          _index: 278,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "algo.interface.ts",
        {
          _index: 386,
          title: {},
          body: {
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "algo.interface.ts:2",
        {
          _index: 388,
          title: {},
          body: { "interfaces/HashAlgoInterface.html": {} },
        },
      ],
      [
        "algo.interface.ts:3",
        {
          _index: 387,
          title: {},
          body: { "interfaces/HashAlgoInterface.html": {} },
        },
      ],
      ["allow", { _index: 798, title: {}, body: { "properties.html": {} } }],
      [
        "already",
        {
          _index: 557,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["amazing", { _index: 698, title: {}, body: { "index.html": {} } }],
      ["and/or", { _index: 744, title: {}, body: { "license.html": {} } }],
      ["api", { _index: 797, title: {}, body: { "properties.html": {} } }],
      ["app", { _index: 676, title: {}, body: { "index.html": {} } }],
      [
        "app_pipe",
        {
          _index: 301,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "app_port",
        { _index: 337, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "app_url_prefix",
        { _index: 338, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      ["applications", { _index: 669, title: {}, body: { "index.html": {} } }],
      [
        "appmodule",
        {
          _index: 1,
          title: { "modules/AppModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["arising", { _index: 780, title: {}, body: { "license.html": {} } }],
      ["associated", { _index: 730, title: {}, body: { "license.html": {} } }],
      [
        "async",
        {
          _index: 44,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "asynchronously",
        {
          _index: 259,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "auth",
        {
          _index: 41,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "auth.controller",
        { _index: 97, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "auth.guard",
        {
          _index: 107,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "controllers/TodoListController.html": {},
          },
        },
      ],
      [
        "auth.guard.ts",
        {
          _index: 395,
          title: {},
          body: { "classes/JwtAuthGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "auth.guard.ts:5",
        { _index: 399, title: {}, body: { "classes/JwtAuthGuard.html": {} } },
      ],
      [
        "auth.service",
        {
          _index: 69,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        "auth/auth.module",
        {
          _index: 31,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/TodosModule.html": {},
          },
        },
      ],
      [
        "authcontroller",
        {
          _index: 38,
          title: { "controllers/AuthController.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authguard",
        { _index: 401, title: {}, body: { "classes/JwtAuthGuard.html": {} } },
      ],
      [
        'authguard("jwt',
        { _index: 396, title: {}, body: { "classes/JwtAuthGuard.html": {} } },
      ],
      [
        "authmodule",
        {
          _index: 11,
          title: { "modules/AuthModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "author",
        {
          _index: 708,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      ["authors", { _index: 770, title: {}, body: { "license.html": {} } }],
      [
        "authservice",
        {
          _index: 68,
          title: { "injectables/AuthService.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/JwtStrategy.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      ["available", { _index: 787, title: {}, body: { "modules.html": {} } }],
      [
        "await",
        {
          _index: 82,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["backers", { _index: 699, title: {}, body: { "index.html": {} } }],
      [
        "base",
        {
          _index: 322,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "based",
        {
          _index: 267,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "basetododto",
        {
          _index: 198,
          title: { "classes/BaseTodoDto.html": {} },
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "basetododto:10",
        { _index: 319, title: {}, body: { "classes/CreateTodoDto.html": {} } },
      ],
      [
        "basetododto:13",
        { _index: 321, title: {}, body: { "classes/CreateTodoDto.html": {} } },
      ],
      [
        "basetododto:8",
        { _index: 320, title: {}, body: { "classes/CreateTodoDto.html": {} } },
      ],
      [
        "baseuserdto",
        {
          _index: 214,
          title: { "classes/BaseUserDto.html": {} },
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateUserDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "baseuserdto:10",
        { _index: 458, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "baseuserdto:13",
        { _index: 460, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "baseuserdto:8",
        { _index: 459, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "bcrypt",
        {
          _index: 263,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "bcrypt.compare(data",
        {
          _index: 286,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "bcrypt.gensalt(this.saltrounds",
        {
          _index: 294,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "bcrypt.hash(data",
        {
          _index: 295,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "bcrypt.provider",
        {
          _index: 436,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "bcryptprovider",
        {
          _index: 94,
          title: { "injectables/BcryptProvider.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "body",
        {
          _index: 63,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/TodoListController.html": {},
          },
        },
      ],
      [
        "bootstrap",
        {
          _index: 6,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "overview.html": {},
          },
        },
      ],
      ["browse", { _index: 785, title: {}, body: { "modules.html": {} } }],
      ["browser", { _index: 783, title: {}, body: { "modules.html": {} } }],
      [
        "buffer",
        {
          _index: 246,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      ["build", { _index: 795, title: {}, body: { "properties.html": {} } }],
      ["building", { _index: 664, title: {}, body: { "index.html": {} } }],
      ["c", { _index: 717, title: {}, body: { "license.html": {} } }],
      [
        "cascade",
        { _index: 475, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "catch",
        {
          _index: 175,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "cause",
        {
          _index: 566,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "character",
        { _index: 454, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "characters",
        { _index: 448, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      ["charge", { _index: 725, title: {}, body: { "license.html": {} } }],
      [
        "checker",
        { _index: 621, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "checking",
        {
          _index: 182,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      ["claim", { _index: 773, title: {}, body: { "license.html": {} } }],
      [
        "class",
        {
          _index: 34,
          title: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "classes",
        {
          _index: 199,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "overview.html": {},
          },
        },
      ],
      ["cli", { _index: 644, title: {}, body: { "dependencies.html": {} } }],
      [
        "cluster_appmodule",
        {
          _index: 9,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_appmodule_imports",
        {
          _index: 10,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authmodule",
        {
          _index: 89,
          title: {},
          body: { "modules/AuthModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authmodule_exports",
        {
          _index: 91,
          title: {},
          body: { "modules/AuthModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authmodule_imports",
        { _index: 90, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "cluster_authmodule_providers",
        {
          _index: 92,
          title: {},
          body: { "modules/AuthModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_todosmodule",
        { _index: 494, title: {}, body: { "modules/TodosModule.html": {} } },
      ],
      [
        "cluster_todosmodule_imports",
        { _index: 495, title: {}, body: { "modules/TodosModule.html": {} } },
      ],
      [
        "cluster_usersmodule",
        {
          _index: 570,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule_exports",
        {
          _index: 571,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule_providers",
        {
          _index: 572,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "codecov_token",
        { _index: 339, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "column",
        {
          _index: 467,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "column({unique",
        { _index: 508, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "common/decorators/is",
        { _index: 362, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "common/decorators/non",
        {
          _index: 209,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/EnvValidations.html": {},
          },
        },
      ],
      [
        "compare",
        {
          _index: 235,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "compare(data",
        {
          _index: 245,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "comparepassword",
        {
          _index: 422,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "comparepassword(data",
        {
          _index: 426,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "compares",
        {
          _index: 249,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "comparing",
        {
          _index: 232,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "comparison",
        {
          _index: 284,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "compodoc/compodoc",
        { _index: 606, title: {}, body: { "dependencies.html": {} } },
      ],
      ["conditions", { _index: 752, title: {}, body: { "license.html": {} } }],
      [
        "config",
        {
          _index: 104,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/EnvValidations.html": {},
            "classes/JwtStrategy.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "config.ts",
        {
          _index: 597,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "configmodule",
        {
          _index: 298,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
          },
        },
      ],
      [
        "configmodule.forroot",
        {
          _index: 303,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "configservice",
        {
          _index: 237,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "modules/DatabaseModule.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        'configservice.get("datasource_database',
        {
          _index: 812,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.get("datasource_host',
        {
          _index: 806,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.get("datasource_logging',
        {
          _index: 816,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.get("datasource_password',
        {
          _index: 810,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.get("datasource_port',
        {
          _index: 808,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.get("datasource_synchronization',
        {
          _index: 814,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.get("datasource_username',
        {
          _index: 809,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "configuration",
        {
          _index: 243,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "configuration/configuration.module",
        { _index: 27, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "configuration/database/dev",
        { _index: 329, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "configuration/jwt/jwt",
        {
          _index: 103,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        "configurationmodule",
        {
          _index: 13,
          title: { "modules/ConfigurationModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "configured",
        {
          _index: 268,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "connection",
        {
          _index: 781,
          title: {},
          body: { "license.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "console.log(error.code",
        {
          _index: 561,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "const",
        {
          _index: 80,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "constructor",
        {
          _index: 133,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "constructor(authservice",
        { _index: 404, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "constructor(bcrypt",
        {
          _index: 424,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "constructor(configservice",
        {
          _index: 236,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "constructor(private",
        {
          _index: 72,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "constructor(userrepository",
        {
          _index: 520,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "constructor(userservice",
        {
          _index: 134,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "containing",
        {
          _index: 534,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["contract", { _index: 778, title: {}, body: { "license.html": {} } }],
      [
        "controller",
        {
          _index: 37,
          title: {
            "controllers/AuthController.html": {},
            "controllers/TodoListController.html": {},
          },
          body: {
            "controllers/AuthController.html": {},
            "controllers/TodoListController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        'controller("auth',
        {
          _index: 71,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        'controller("todos',
        {
          _index: 488,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "controllers",
        {
          _index: 32,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["copies", { _index: 746, title: {}, body: { "license.html": {} } }],
      ["copy", { _index: 728, title: {}, body: { "license.html": {} } }],
      ["copyright", { _index: 716, title: {}, body: { "license.html": {} } }],
      [
        "count",
        {
          _index: 559,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "coverage",
        {
          _index: 576,
          title: { "coverage.html": {} },
          body: { "coverage.html": {}, "index.html": {} },
        },
      ],
      [
        "create",
        {
          _index: 165,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "controllers/TodoListController.html": {},
            "classes/UpdateTodoDto.html": {},
          },
        },
      ],
      [
        "created",
        {
          _index: 537,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "createnew",
        {
          _index: 516,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "createnew(signupdto",
        {
          _index: 524,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "creates",
        {
          _index: 239,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "createtododto",
        {
          _index: 315,
          title: { "classes/CreateTodoDto.html": {} },
          body: {
            "classes/CreateTodoDto.html": {},
            "controllers/TodoListController.html": {},
            "classes/UpdateTodoDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "creation",
        {
          _index: 550,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["damages", { _index: 774, title: {}, body: { "license.html": {} } }],
      [
        "data",
        {
          _index: 251,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "database",
        {
          _index: 811,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "database.config",
        { _index: 330, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "database.config.ts",
        {
          _index: 593,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "database/database.module",
        { _index: 28, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "databasemodule",
        {
          _index: 14,
          title: { "modules/DatabaseModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "datasource",
        {
          _index: 822,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "datasource(options",
        {
          _index: 823,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "datasource.initialize",
        {
          _index: 824,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "datasource_database",
        { _index: 340, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "datasource_host",
        { _index: 341, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "datasource_password",
        { _index: 342, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "datasource_port",
        { _index: 343, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "datasource_username",
        { _index: 344, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "datasourcefactory",
        { _index: 334, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      ["deal", { _index: 732, title: {}, body: { "license.html": {} } }],
      ["dealings", { _index: 782, title: {}, body: { "license.html": {} } }],
      [
        "debugging",
        {
          _index: 273,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "declarations",
        {
          _index: 5,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "decorators",
        {
          _index: 49,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "decorators/is",
        { _index: 393, title: {}, body: { "classes/IdDto.html": {} } },
      ],
      [
        "default",
        {
          _index: 116,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "defaultstrategy",
        { _index: 113, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "defined",
        {
          _index: 51,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "denied",
        {
          _index: 179,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "dependencies",
        {
          _index: 3,
          title: { "dependencies.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "description",
        {
          _index: 202,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "injectables/PasswordProvider.html": {},
            "entities/Todo.html": {},
            "injectables/UserService.html": {},
            "index.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "details",
        {
          _index: 528,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "dev",
        {
          _index: 825,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["development", { _index: 677, title: {}, body: { "index.html": {} } }],
      ["distribute", { _index: 742, title: {}, body: { "license.html": {} } }],
      [
        "documentation",
        {
          _index: 577,
          title: {},
          body: { "coverage.html": {}, "license.html": {} },
        },
      ],
      [
        "dto.ts",
        {
          _index: 391,
          title: {},
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "dto.ts:5",
        { _index: 392, title: {}, body: { "classes/IdDto.html": {} } },
      ],
      [
        "dto/create",
        {
          _index: 486,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "dto/sign",
        {
          _index: 548,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "during",
        {
          _index: 292,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "dynamically",
        {
          _index: 264,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      ["e2e", { _index: 687, title: {}, body: { "index.html": {} } }],
      [
        "each",
        { _index: 227, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      ["efficient", { _index: 665, title: {}, body: { "index.html": {} } }],
      [
        "email",
        {
          _index: 217,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "empty",
        {
          _index: 210,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/EnvValidations.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "enableimplicitconversion",
        {
          _index: 314,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "classes/EnvValidations.html": {},
          },
        },
      ],
      [
        "encrypted",
        {
          _index: 247,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "entities",
        {
          _index: 464,
          title: {},
          body: {
            "entities/Todo.html": {},
            "entities/User.html": {},
            "overview.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "entity",
        {
          _index: 157,
          title: { "entities/Todo.html": {}, "entities/User.html": {} },
          body: {
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/JwtStrategy.html": {},
            "entities/Todo.html": {},
            "modules/TodosModule.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        'entity("todos',
        { _index: 479, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        'entity("users',
        { _index: 513, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts",
        {
          _index: 466,
          title: {},
          body: {
            "entities/Todo.html": {},
            "entities/User.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "entity.ts:11",
        {
          _index: 468,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "entity.ts:13",
        {
          _index: 476,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "entity.ts:15",
        { _index: 511, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "entity.ts:7",
        {
          _index: 470,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "entity.ts:9",
        {
          _index: 471,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "entity/todo",
        { _index: 497, title: {}, body: { "modules/TodosModule.html": {} } },
      ],
      [
        "entity/user",
        {
          _index: 546,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "env",
        {
          _index: 305,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "envfilepath",
        {
          _index: 304,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "environements/env.validations",
        {
          _index: 300,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "environment",
        {
          _index: 277,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "environments",
        { _index: 380, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "envvalidations",
        {
          _index: 335,
          title: { "classes/EnvValidations.html": {} },
          body: { "classes/EnvValidations.html": {}, "coverage.html": {} },
        },
      ],
      [
        "err",
        { _index: 400, title: {}, body: { "classes/JwtAuthGuard.html": {} } },
      ],
      [
        "error",
        {
          _index: 176,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        'error("datasourceoption',
        {
          _index: 821,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "error.message",
        {
          _index: 288,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "error.message.tostring",
        {
          _index: 567,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "errors",
        { _index: 371, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "errors.length",
        { _index: 375, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "established",
        {
          _index: 826,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["event", { _index: 769, title: {}, body: { "license.html": {} } }],
      [
        "example",
        {
          _index: 455,
          title: {},
          body: { "classes/SignUpDto.html": {}, "index.html": {} },
        },
      ],
      [
        "existence",
        {
          _index: 183,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "expirein",
        {
          _index: 828,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "expiresin",
        { _index: 122, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "export",
        {
          _index: 33,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "exports",
        {
          _index: 8,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "express",
        {
          _index: 614,
          title: {},
          body: { "dependencies.html": {}, "license.html": {} },
        },
      ],
      [
        "extends",
        {
          _index: 317,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "externals",
        { _index: 647, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "extractjwt",
        { _index: 409, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "extractjwt.fromauthheaderasbearertoken",
        { _index: 412, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "failed",
        {
          _index: 290,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "fails",
        {
          _index: 285,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "failure",
        {
          _index: 530,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "false",
        { _index: 374, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "fetched",
        {
          _index: 276,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "file",
        {
          _index: 22,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["files", { _index: 731, title: {}, body: { "license.html": {} } }],
      [
        "find",
        {
          _index: 565,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "findonebyid",
        {
          _index: 517,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "findonebyid(id",
        {
          _index: 538,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "finduserbyemail",
        {
          _index: 518,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "finduserbyemail(email",
        {
          _index: 540,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "finduserbyid",
        {
          _index: 130,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "finduserbyid(id",
        {
          _index: 138,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      ["fitness", { _index: 765, title: {}, body: { "license.html": {} } }],
      ["following", { _index: 751, title: {}, body: { "license.html": {} } }],
      [
        "forbidnonwhitelisted",
        {
          _index: 311,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      ["fork", { _index: 619, title: {}, body: { "dependencies.html": {} } }],
      [
        "found",
        {
          _index: 568,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["framework", { _index: 663, title: {}, body: { "index.html": {} } }],
      ["free", { _index: 724, title: {}, body: { "license.html": {} } }],
      [
        "function",
        {
          _index: 365,
          title: {},
          body: { "classes/EnvValidations.html": {}, "coverage.html": {} },
        },
      ],
      [
        "functions",
        {
          _index: 650,
          title: { "miscellaneous/functions.html": {} },
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      ["furnished", { _index: 749, title: {}, body: { "license.html": {} } }],
      [
        "generate",
        {
          _index: 170,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "generated",
        {
          _index: 265,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "generatetokenandlogin",
        {
          _index: 131,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "generatetokenandlogin(user",
        {
          _index: 143,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "getdevdatabaseconfig",
        {
          _index: 327,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "getdevdatasourcefactory",
        {
          _index: 328,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "getting",
        {
          _index: 659,
          title: { "index.html": {}, "license.html": {} },
          body: {},
        },
      ],
      [
        "given",
        {
          _index: 250,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      ["granted", { _index: 723, title: {}, body: { "license.html": {} } }],
      ["graph", { _index: 786, title: {}, body: { "modules.html": {} } }],
      ["grow", { _index: 694, title: {}, body: { "index.html": {} } }],
      [
        "handlerequest",
        { _index: 397, title: {}, body: { "classes/JwtAuthGuard.html": {} } },
      ],
      [
        "handlerequest(err",
        { _index: 398, title: {}, body: { "classes/JwtAuthGuard.html": {} } },
      ],
      [
        "handles",
        {
          _index: 551,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "handling",
        {
          _index: 432,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "hash",
        {
          _index: 158,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "hash(data",
        {
          _index: 257,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "hashalgointerface",
        {
          _index: 230,
          title: { "interfaces/HashAlgoInterface.html": {} },
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "hashed",
        {
          _index: 254,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "hashedpassword",
        {
          _index: 160,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "hashes",
        {
          _index: 260,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "hashing",
        {
          _index: 231,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "hashpassword",
        {
          _index: 423,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "hashpassword(data",
        {
          _index: 428,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      ["here", { _index: 705, title: {}, body: { "index.html": {} } }],
      ["hereby", { _index: 722, title: {}, body: { "license.html": {} } }],
      ["holders", { _index: 771, title: {}, body: { "license.html": {} } }],
      [
        "host",
        {
          _index: 805,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "httpexception",
        {
          _index: 151,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "https://nestjs.com",
        { _index: 712, title: {}, body: { "index.html": {} } },
      ],
      [
        "httpstatus",
        {
          _index: 152,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "httpstatus.internal_server_error",
        {
          _index: 169,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "id",
        {
          _index: 141,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/IdDto.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "iddto",
        {
          _index: 389,
          title: { "classes/IdDto.html": {} },
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      ["identifier", { _index: 578, title: {}, body: { "coverage.html": {} } }],
      [
        "implements",
        {
          _index: 229,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      ["implied", { _index: 761, title: {}, body: { "license.html": {} } }],
      [
        "import",
        {
          _index: 25,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "imports",
        {
          _index: 24,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "include",
        { _index: 450, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      ["included", { _index: 756, title: {}, body: { "license.html": {} } }],
      ["including", { _index: 735, title: {}, body: { "license.html": {} } }],
      [
        "index",
        {
          _index: 42,
          title: { "index.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "indicating",
        {
          _index: 529,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "info",
        {
          _index: 20,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "inherited",
        {
          _index: 318,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "inject",
        { _index: 332, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "injectable",
        {
          _index: 124,
          title: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "injectables",
        {
          _index: 125,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "injectrepository",
        {
          _index: 545,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "injectrepository(user",
        {
          _index: 549,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["installation", { _index: 673, title: {}, body: { "index.html": {} } }],
      [
        "installrunning",
        { _index: 675, title: {}, body: { "index.html": {} } },
      ],
      [
        "instance",
        {
          _index: 240,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "instanceof",
        {
          _index: 177,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "integer",
        {
          _index: 364,
          title: {},
          body: { "classes/EnvValidations.html": {}, "classes/IdDto.html": {} },
        },
      ],
      [
        "integer.ts",
        {
          _index: 588,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "interface",
        {
          _index: 383,
          title: { "interfaces/HashAlgoInterface.html": {} },
          body: {
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "interfaces",
        {
          _index: 384,
          title: {},
          body: { "interfaces/HashAlgoInterface.html": {} },
        },
      ],
      [
        "internally",
        {
          _index: 433,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "internalservererrorexception",
        {
          _index: 153,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        'internalservererrorexception("failed',
        {
          _index: 569,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "invalid",
        {
          _index: 164,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "isemail",
        {
          _index: 219,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "isemailused",
        {
          _index: 519,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "isemailused(email",
        {
          _index: 542,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "isglobal",
        {
          _index: 306,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "isnonemptystring",
        {
          _index: 204,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "classes/SignUpDto.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "isnonemptystring(validationoptions",
        {
          _index: 655,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "ispositiveinteger",
        {
          _index: 348,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "ispositiveinteger(validationoptions",
        {
          _index: 658,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "isstrongpassword",
        { _index: 462, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "isstrongpassword({minlength",
        { _index: 441, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "isvalidpassword",
        {
          _index: 188,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      ["join", { _index: 701, title: {}, body: { "index.html": {} } }],
      [
        "jordach",
        {
          _index: 719,
          title: {},
          body: { "license.html": {}, "properties.html": {} },
        },
      ],
      [
        "json.stringify(createtododto",
        {
          _index: 490,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "jwt",
        {
          _index: 114,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
            "controllers/TodoListController.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "jwt/jwt",
        {
          _index: 106,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtAuthGuard.html": {},
            "controllers/TodoListController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "jwt/jwt.strategy",
        { _index: 111, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "jwt/jwt.strategy.ts",
        {
          _index: 402,
          title: {},
          body: { "classes/JwtStrategy.html": {}, "coverage.html": {} },
        },
      ],
      [
        "jwt/jwt.strategy.ts:15",
        { _index: 407, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "jwt/jwt.strategy.ts:7",
        { _index: 405, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "jwt_secret",
        { _index: 345, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "jwtauthguard",
        {
          _index: 93,
          title: { "classes/JwtAuthGuard.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtAuthGuard.html": {},
            "controllers/TodoListController.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "jwtconfig",
        {
          _index: 102,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "jwtconfig.expirein",
        { _index: 123, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "jwtconfig.secret",
        {
          _index: 120,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        "jwtfromrequest",
        { _index: 411, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "jwtmodule",
        { _index: 100, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "jwtmodule.register",
        { _index: 118, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "jwtservice",
        {
          _index: 136,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "jwtstrategy",
        {
          _index: 110,
          title: { "classes/JwtStrategy.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["kamil", { _index: 709, title: {}, body: { "index.html": {} } }],
      ["kind", { _index: 760, title: {}, body: { "license.html": {} } }],
      [
        "legend",
        {
          _index: 4,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["liability", { _index: 775, title: {}, body: { "license.html": {} } }],
      ["liable", { _index: 772, title: {}, body: { "license.html": {} } }],
      [
        "license",
        {
          _index: 715,
          title: { "license.html": {} },
          body: { "index.html": {}, "license.html": {}, "properties.html": {} },
        },
      ],
      ["licensed", { _index: 691, title: {}, body: { "index.html": {} } }],
      ["limitation", { _index: 736, title: {}, body: { "license.html": {} } }],
      ["limited", { _index: 762, title: {}, body: { "license.html": {} } }],
      ["list", { _index: 801, title: {}, body: { "properties.html": {} } }],
      [
        "loaded",
        { _index: 382, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "logger",
        {
          _index: 129,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        'logger("authservice',
        {
          _index: 150,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        'logger("database',
        {
          _index: 818,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'logger("envvalidations',
        { _index: 368, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        'logger("hashalgoprovider',
        {
          _index: 271,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        'logger("userservice',
        {
          _index: 544,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "logger.fatal",
        {
          _index: 819,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "logger.log",
        {
          _index: 379,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "logger.log(`${errors.length",
        { _index: 377, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "logging",
        {
          _index: 815,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "login",
        {
          _index: 45,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "login(@body",
        {
          _index: 79,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "login(logindto",
        {
          _index: 47,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "logindto",
        {
          _index: 48,
          title: { "classes/LoginDto.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/LoginDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "logindto.email",
        {
          _index: 187,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "logindto.password",
        {
          _index: 190,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "logs",
        {
          _index: 527,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "long",
        { _index: 449, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "lowercase",
        { _index: 452, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "makaya",
        {
          _index: 720,
          title: {},
          body: { "license.html": {}, "properties.html": {} },
        },
      ],
      ["manage", { _index: 800, title: {}, body: { "properties.html": {} } }],
      [
        "manytoone",
        { _index: 477, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "manytoone(undefined",
        { _index: 472, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "matches",
        {
          _index: 256,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "matching",
        {
          _index: 36,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "merchantability",
        { _index: 764, title: {}, body: { "license.html": {} } },
      ],
      ["merge", { _index: 740, title: {}, body: { "license.html": {} } }],
      [
        "message",
        {
          _index: 86,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/SignUpDto.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "metadata",
        { _index: 632, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "method",
        {
          _index: 282,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "methods",
        {
          _index: 43,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "controllers/TodoListController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "minlength",
        { _index: 463, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "minlowercase",
        { _index: 443, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "minnumbers",
        { _index: 446, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "minsymbols",
        { _index: 447, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "minuppercase",
        { _index: 445, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "miscellaneous",
        {
          _index: 649,
          title: {
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
          body: {
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "mit",
        {
          _index: 690,
          title: {},
          body: { "index.html": {}, "license.html": {}, "properties.html": {} },
        },
      ],
      ["mode", { _index: 680, title: {}, body: { "index.html": {} } }],
      ["modify", { _index: 739, title: {}, body: { "license.html": {} } }],
      [
        "module",
        {
          _index: 0,
          title: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
          },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "overview.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "moduleconfig",
        {
          _index: 820,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "modules",
        {
          _index: 2,
          title: { "modules.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["more", { _index: 704, title: {}, body: { "index.html": {} } }],
      ["myśliwiec", { _index: 710, title: {}, body: { "index.html": {} } }],
      [
        "name",
        {
          _index: 54,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "neonctl",
        { _index: 625, title: {}, body: { "dependencies.html": {} } },
      ],
      ["nest", { _index: 670, title: {}, body: { "index.html": {} } }],
      ["nestframework", { _index: 714, title: {}, body: { "index.html": {} } }],
      [
        "nestjs/common",
        {
          _index: 26,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/config",
        {
          _index: 279,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/DatabaseModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/core",
        {
          _index: 302,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/jwt",
        {
          _index: 101,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/mapped",
        {
          _index: 418,
          title: {},
          body: {
            "classes/LoginDto.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/passport",
        {
          _index: 109,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/platform",
        { _index: 613, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "nestjs/typeorm",
        {
          _index: 326,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "modules/TodosModule.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "new",
        {
          _index: 85,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/EnvValidations.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "controllers/TodoListController.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "newly",
        {
          _index: 536,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "newtask",
        {
          _index: 482,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "newtask(@body",
        {
          _index: 489,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "newtask(createtododto",
        {
          _index: 483,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "newuser",
        {
          _index: 166,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      ["node", { _index: 646, title: {}, body: { "dependencies.html": {} } }],
      ["node.js", { _index: 662, title: {}, body: { "index.html": {} } }],
      [
        "noninfringement",
        { _index: 768, title: {}, body: { "license.html": {} } },
      ],
      [
        "note",
        {
          _index: 430,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "notfoundexception",
        {
          _index: 154,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["notice", { _index: 754, title: {}, body: { "license.html": {} } }],
      [
        "null",
        {
          _index: 185,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "number",
        {
          _index: 139,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "object",
        {
          _index: 533,
          title: {},
          body: {
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["obtaining", { _index: 727, title: {}, body: { "license.html": {} } }],
      [
        "occurred",
        {
          _index: 181,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "occurs",
        {
          _index: 291,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "omittype",
        { _index: 417, title: {}, body: { "classes/LoginDto.html": {} } },
      ],
      [
        "omittype(signupdto",
        { _index: 416, title: {}, body: { "classes/LoginDto.html": {} } },
      ],
      [
        "ondelete",
        { _index: 474, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "onetomany",
        { _index: 512, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "onetomany(undefined",
        { _index: 509, title: {}, body: { "entities/User.html": {} } },
      ],
      ["open", { _index: 692, title: {}, body: { "index.html": {} } }],
      [
        "optional",
        {
          _index: 56,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "controllers/TodoListController.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "options",
        {
          _index: 817,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "otherwise",
        {
          _index: 526,
          title: {},
          body: { "injectables/UserService.html": {}, "license.html": {} },
        },
      ],
      [
        "out",
        {
          _index: 19,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "license.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "overview",
        {
          _index: 788,
          title: { "overview.html": {} },
          body: { "overview.html": {} },
        },
      ],
      [
        "package",
        {
          _index: 605,
          title: { "dependencies.html": {}, "properties.html": {} },
          body: {},
        },
      ],
      [
        "param",
        {
          _index: 280,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "parameters",
        {
          _index: 53,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "controllers/TodoListController.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "parseint(process.env.salt_rounds",
        {
          _index: 274,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "partialtype",
        {
          _index: 503,
          title: {},
          body: {
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "partialtype(baseuserdto",
        { _index: 506, title: {}, body: { "classes/UpdateUserDto.html": {} } },
      ],
      [
        "partialtype(createtododto",
        { _index: 502, title: {}, body: { "classes/UpdateTodoDto.html": {} } },
      ],
      ["particular", { _index: 766, title: {}, body: { "license.html": {} } }],
      [
        "passport",
        {
          _index: 105,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "passportmodule",
        { _index: 108, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "passportmodule.register",
        { _index: 112, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "passportstrategy",
        { _index: 408, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "passportstrategy(strategy",
        { _index: 403, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "password",
        {
          _index: 159,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/User.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "password/bcrypt.provider",
        { _index: 99, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "password/password.provider",
        {
          _index: 98,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
          },
        },
      ],
      [
        "password@@201",
        { _index: 456, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "passwordprovider",
        {
          _index: 95,
          title: { "injectables/PasswordProvider.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "injectables/PasswordProvider.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "passwords",
        {
          _index: 233,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "payload",
        {
          _index: 192,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      ["permission", { _index: 721, title: {}, body: { "license.html": {} } }],
      ["permit", { _index: 747, title: {}, body: { "license.html": {} } }],
      ["person", { _index: 726, title: {}, body: { "license.html": {} } }],
      ["persons", { _index: 748, title: {}, body: { "license.html": {} } }],
      ["pg", { _index: 629, title: {}, body: { "dependencies.html": {} } }],
      [
        "plain",
        {
          _index: 252,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "plaintoinstance",
        { _index: 361, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "plaintoinstance(envvalidations",
        { _index: 370, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      ["please", { _index: 702, title: {}, body: { "index.html": {} } }],
      ["plugin", { _index: 623, title: {}, body: { "dependencies.html": {} } }],
      [
        "port",
        {
          _index: 807,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["portions", { _index: 758, title: {}, body: { "license.html": {} } }],
      [
        "positive",
        {
          _index: 363,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "post",
        {
          _index: 64,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/TodoListController.html": {},
          },
        },
      ],
      [
        'post("login',
        {
          _index: 78,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        'post("register',
        {
          _index: 74,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "post('login",
        {
          _index: 50,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "post('register",
        {
          _index: 61,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "postgres",
        {
          _index: 804,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "prefix",
        {
          _index: 40,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/TodoListController.html": {},
          },
        },
      ],
      [
        "primarygeneratedcolumn",
        {
          _index: 469,
          title: {},
          body: { "entities/Todo.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "private",
        {
          _index: 128,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "process",
        {
          _index: 293,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "process.env.jwt_secret",
        {
          _index: 827,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "process.env.jwt_token_expire_in",
        {
          _index: 829,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["production", { _index: 682, title: {}, body: { "index.html": {} } }],
      ["progressive", { _index: 661, title: {}, body: { "index.html": {} } }],
      ["project", { _index: 693, title: {}, body: { "index.html": {} } }],
      [
        "promise",
        {
          _index: 142,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "properties",
        {
          _index: 127,
          title: { "properties.html": {} },
          body: {
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "classes/IdDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "protected",
        {
          _index: 492,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "provide",
        {
          _index: 308,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "provided",
        {
          _index: 261,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
            "license.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "providers",
        {
          _index: 7,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/ConfigurationModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["publish", { _index: 741, title: {}, body: { "license.html": {} } }],
      ["purpose", { _index: 767, title: {}, body: { "license.html": {} } }],
      [
        "queryfailederror",
        {
          _index: 547,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["read", { _index: 703, title: {}, body: { "index.html": {} } }],
      [
        "readonly",
        {
          _index: 73,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/IdDto.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "record",
        {
          _index: 367,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "reflect",
        { _index: 631, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "register",
        {
          _index: 115,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
          },
        },
      ],
      [
        "register(signupdto",
        {
          _index: 145,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "registration",
        {
          _index: 46,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "registration(@body",
        {
          _index: 75,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "registration(signupdto",
        {
          _index: 59,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "repository",
        {
          _index: 521,
          title: {},
          body: { "injectables/UserService.html": {}, "index.html": {} },
        },
      ],
      [
        "required",
        {
          _index: 435,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "reset",
        {
          _index: 18,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "resolves",
        {
          _index: 270,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["restful", { _index: 796, title: {}, body: { "properties.html": {} } }],
      ["restriction", { _index: 734, title: {}, body: { "license.html": {} } }],
      [
        "results",
        {
          _index: 35,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "retrieving",
        {
          _index: 281,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "return",
        {
          _index: 76,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "controllers/TodoListController.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "returns",
        {
          _index: 57,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "controllers/TodoListController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["rights", { _index: 737, title: {}, body: { "license.html": {} } }],
      [
        "rounds",
        {
          _index: 269,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "route",
        {
          _index: 493,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "run",
        {
          _index: 634,
          title: {},
          body: { "dependencies.html": {}, "index.html": {} },
        },
      ],
      ["rxjs", { _index: 636, title: {}, body: { "dependencies.html": {} } }],
      [
        "salt",
        {
          _index: 266,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "salt_rounds",
        { _index: 346, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "saltrounds",
        {
          _index: 234,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "save",
        {
          _index: 531,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["scalable", { _index: 666, title: {}, body: { "index.html": {} } }],
      ["script", { _index: 635, title: {}, body: { "dependencies.html": {} } }],
      [
        "secret",
        {
          _index: 119,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "secretorkey",
        { _index: 413, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      ["sell", { _index: 745, title: {}, body: { "license.html": {} } }],
      ["server", { _index: 667, title: {}, body: { "index.html": {} } }],
      [
        "service",
        {
          _index: 241,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      ["shall", { _index: 755, title: {}, body: { "license.html": {} } }],
      ["side", { _index: 668, title: {}, body: { "index.html": {} } }],
      [
        "sign",
        {
          _index: 420,
          title: {},
          body: {
            "classes/LoginDto.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "signoptions",
        { _index: 121, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "signupdto",
        {
          _index: 60,
          title: { "classes/SignUpDto.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/LoginDto.html": {},
            "classes/SignUpDto.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "signupdto.password",
        {
          _index: 163,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "skipmissingproperties",
        { _index: 373, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      ["software", { _index: 729, title: {}, body: { "license.html": {} } }],
      [
        "source",
        {
          _index: 21,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "classes/LoginDto.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "special",
        { _index: 453, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "specific",
        {
          _index: 553,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["sponsors", { _index: 696, title: {}, body: { "index.html": {} } }],
      [
        "src/.../dev",
        {
          _index: 802,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../env.validations.ts",
        {
          _index: 654,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/.../is",
        {
          _index: 653,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/.../jwt",
        {
          _index: 803,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../main.ts",
        {
          _index: 651,
          title: {},
          body: {
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../non",
        {
          _index: 652,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/app.module.ts",
        { _index: 23, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "src/auth/auth.controller.ts",
        {
          _index: 39,
          title: {},
          body: { "controllers/AuthController.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/auth.controller.ts:12",
        {
          _index: 62,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "src/auth/auth.controller.ts:17",
        {
          _index: 52,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "src/auth/auth.module.ts",
        { _index: 96, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "src/auth/auth.service.ts",
        {
          _index: 126,
          title: {},
          body: { "injectables/AuthService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/auth.service.ts:20",
        {
          _index: 137,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "src/auth/auth.service.ts:27",
        {
          _index: 146,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "src/auth/auth.service.ts:53",
        {
          _index: 140,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "src/auth/auth.service.ts:69",
        {
          _index: 148,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "src/auth/auth.service.ts:86",
        {
          _index: 144,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "src/auth/passport",
        {
          _index: 394,
          title: {},
          body: {
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "controllers/TodoListController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/auth/password/bcrypt.provider.ts",
        {
          _index: 228,
          title: {},
          body: { "injectables/BcryptProvider.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/password/bcrypt.provider.ts:23",
        {
          _index: 238,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/auth/password/bcrypt.provider.ts:34",
        {
          _index: 275,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/auth/password/bcrypt.provider.ts:42",
        {
          _index: 248,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/auth/password/bcrypt.provider.ts:61",
        {
          _index: 258,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/auth/password/hash",
        {
          _index: 385,
          title: {},
          body: {
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/auth/password/password.provider.ts",
        {
          _index: 421,
          title: {},
          body: {
            "injectables/PasswordProvider.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/auth/password/password.provider.ts:21",
        {
          _index: 429,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "src/auth/password/password.provider.ts:5",
        {
          _index: 425,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "src/auth/password/password.provider.ts:8",
        {
          _index: 427,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "src/common/decorators/is",
        {
          _index: 587,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/common/decorators/non",
        {
          _index: 590,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/common/dto/id",
        {
          _index: 390,
          title: {},
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/configuration/configuration.module.ts",
        {
          _index: 296,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "src/configuration/database/dev",
        {
          _index: 592,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/configuration/environements/env.validations.ts",
        {
          _index: 336,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "src/configuration/environements/env.validations.ts:10",
        { _index: 351, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:12",
        { _index: 356, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:14",
        { _index: 354, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:16",
        { _index: 352, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:18",
        { _index: 353, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:20",
        { _index: 355, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:22",
        { _index: 350, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:24",
        { _index: 349, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:26",
        { _index: 359, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:28",
        { _index: 358, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/environements/env.validations.ts:30",
        { _index: 357, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "src/configuration/jwt/jwt",
        {
          _index: 596,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/database/database.module.ts",
        { _index: 324, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "src/main.ts",
        {
          _index: 598,
          title: {},
          body: {
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/todos/dto/base",
        {
          _index: 200,
          title: {},
          body: { "classes/BaseTodoDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/todos/dto/create",
        {
          _index: 316,
          title: {},
          body: { "classes/CreateTodoDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/todos/dto/update",
        {
          _index: 501,
          title: {},
          body: { "classes/UpdateTodoDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/todos/entity/todo",
        {
          _index: 465,
          title: {},
          body: { "entities/Todo.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/todos/todo.controller.ts",
        {
          _index: 481,
          title: {},
          body: {
            "controllers/TodoListController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/todos/todo.controller.ts:9",
        {
          _index: 484,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "src/todos/todos.module.ts",
        { _index: 496, title: {}, body: { "modules/TodosModule.html": {} } },
      ],
      [
        "src/users/dto/base",
        {
          _index: 215,
          title: {},
          body: { "classes/BaseUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/login.dto.ts",
        {
          _index: 415,
          title: {},
          body: { "classes/LoginDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/sign",
        {
          _index: 439,
          title: {},
          body: { "classes/SignUpDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/update",
        {
          _index: 505,
          title: {},
          body: { "classes/UpdateUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/entity/user",
        {
          _index: 507,
          title: {},
          body: { "entities/User.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/user.service.ts",
        {
          _index: 515,
          title: {},
          body: { "injectables/UserService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/user.service.ts:16",
        {
          _index: 522,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/user.service.ts:29",
        {
          _index: 525,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/user.service.ts:49",
        {
          _index: 543,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/user.service.ts:61",
        {
          _index: 539,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/user.service.ts:76",
        {
          _index: 541,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "src/users/users.module.ts",
        { _index: 573, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      ["start", { _index: 678, title: {}, body: { "index.html": {} } }],
      ["start:dev", { _index: 681, title: {}, body: { "index.html": {} } }],
      [
        "start:prodtest",
        { _index: 683, title: {}, body: { "index.html": {} } },
      ],
      [
        "started",
        {
          _index: 660,
          title: { "index.html": {}, "license.html": {} },
          body: {},
        },
      ],
      ["starter", { _index: 672, title: {}, body: { "index.html": {} } }],
      ["statements", { _index: 579, title: {}, body: { "coverage.html": {} } }],
      ["stay", { _index: 706, title: {}, body: { "index.html": {} } }],
      [
        "storeduser",
        {
          _index: 184,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "storeduser.password",
        {
          _index: 191,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "strategy",
        {
          _index: 117,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        "string",
        {
          _index: 161,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "string.ts",
        {
          _index: 591,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "sub",
        {
          _index: 193,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      ["subject", { _index: 750, title: {}, body: { "license.html": {} } }],
      ["sublicense", { _index: 743, title: {}, body: { "license.html": {} } }],
      ["substantial", { _index: 757, title: {}, body: { "license.html": {} } }],
      [
        "successfully",
        {
          _index: 381,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "super",
        { _index: 410, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "support",
        {
          _index: 697,
          title: {},
          body: { "index.html": {}, "modules.html": {} },
        },
      ],
      ["svg", { _index: 784, title: {}, body: { "modules.html": {} } }],
      [
        "swagger_path",
        { _index: 347, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "synchronize",
        {
          _index: 813,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["table", { _index: 604, title: {}, body: { "coverage.html": {} } }],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 603, title: {}, body: { "coverage.html": {} } },
      ],
      ["terser", { _index: 638, title: {}, body: { "dependencies.html": {} } }],
      ["test", { _index: 686, title: {}, body: { "index.html": {} } }],
      [
        "test:covsupport",
        { _index: 689, title: {}, body: { "index.html": {} } },
      ],
      ["test:e2e", { _index: 688, title: {}, body: { "index.html": {} } }],
      ["tests", { _index: 685, title: {}, body: { "index.html": {} } }],
      [
        "text",
        {
          _index: 253,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      ["thanks", { _index: 695, title: {}, body: { "index.html": {} } }],
      [
        "this.authservice.finduserbyid(payload.sub",
        { _index: 414, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "this.authservice.generatetokenandlogin(user",
        {
          _index: 88,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "this.authservice.register(signupdto",
        {
          _index: 77,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "this.authservice.validateusercredentials(logindto",
        {
          _index: 83,
          title: {},
          body: { "controllers/AuthController.html": {} },
        },
      ],
      [
        "this.bcrypt.compare(data",
        {
          _index: 437,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "this.bcrypt.hash(data",
        {
          _index: 438,
          title: {},
          body: { "injectables/PasswordProvider.html": {} },
        },
      ],
      [
        "this.generatetokenandlogin(newuser",
        {
          _index: 172,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.jwtservice.sign(payload",
        {
          _index: 197,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.logger.error(`${error.code",
        {
          _index: 287,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "this.logger.error(error.stack",
        {
          _index: 289,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "this.logger.log",
        {
          _index: 564,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        'this.logger.log("failed',
        {
          _index: 168,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.logger.log(`${error.stack",
        {
          _index: 563,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.logger.log(error.message",
        {
          _index: 556,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.passwordprovider.comparepassword",
        {
          _index: 189,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.passwordprovider.hashpassword",
        {
          _index: 162,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.userrepository.count",
        {
          _index: 560,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.userrepository.create(signupdto",
        {
          _index: 554,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.userrepository.findoneby",
        {
          _index: 562,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.userrepository.save(user",
        {
          _index: 555,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "this.userservice.createnew",
        {
          _index: 167,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.userservice.findonebyid(id",
        {
          _index: 174,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "this.userservice.finduserbyemail",
        {
          _index: 186,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "throw",
        {
          _index: 84,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "throwing",
        {
          _index: 552,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "throws",
        {
          _index: 283,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "title",
        {
          _index: 203,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "entities/Todo.html": {},
          },
        },
      ],
      [
        "todo",
        {
          _index: 222,
          title: { "entities/Todo.html": {} },
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "entities/User.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "todo.controller",
        { _index: 498, title: {}, body: { "modules/TodosModule.html": {} } },
      ],
      [
        "todo.dto",
        {
          _index: 323,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "controllers/TodoListController.html": {},
            "classes/UpdateTodoDto.html": {},
          },
        },
      ],
      [
        "todo.dto.ts",
        {
          _index: 201,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/UpdateTodoDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "todo.dto.ts:10",
        { _index: 205, title: {}, body: { "classes/BaseTodoDto.html": {} } },
      ],
      [
        "todo.dto.ts:13",
        { _index: 208, title: {}, body: { "classes/BaseTodoDto.html": {} } },
      ],
      [
        "todo.dto.ts:8",
        { _index: 206, title: {}, body: { "classes/BaseTodoDto.html": {} } },
      ],
      [
        "todo.user",
        { _index: 510, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "todolistcontroller",
        {
          _index: 480,
          title: { "controllers/TodoListController.html": {} },
          body: {
            "controllers/TodoListController.html": {},
            "modules/TodosModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "todos",
        {
          _index: 218,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/LoginDto.html": {},
            "classes/SignUpDto.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "todos/entity/todo",
        {
          _index: 226,
          title: {},
          body: { "classes/BaseUserDto.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "todos/todos.module",
        { _index: 30, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "todosmodule",
        {
          _index: 15,
          title: { "modules/TodosModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/TodosModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "token",
        {
          _index: 171,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      ["tort", { _index: 779, title: {}, body: { "license.html": {} } }],
      ["touch", { _index: 707, title: {}, body: { "index.html": {} } }],
      [
        "tracking",
        {
          _index: 272,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "transfer",
        {
          _index: 532,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "transform",
        {
          _index: 312,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "transformer",
        {
          _index: 213,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/EnvValidations.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "transformoptions",
        {
          _index: 313,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "true",
        {
          _index: 224,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/ConfigurationModule.html": {},
            "classes/EnvValidations.html": {},
            "classes/SignUpDto.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "try",
        {
          _index: 173,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["ts", { _index: 620, title: {}, body: { "dependencies.html": {} } }],
      ["twitter", { _index: 713, title: {}, body: { "index.html": {} } }],
      [
        "type",
        {
          _index: 55,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/EnvValidations.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "classes/JwtStrategy.html": {},
            "injectables/PasswordProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/Todo.html": {},
            "controllers/TodoListController.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "type(undefined)@validatenested",
        {
          _index: 207,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
          },
        },
      ],
      [
        "type(undefined)@validatenested({each",
        {
          _index: 223,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "typeorm",
        {
          _index: 478,
          title: {},
          body: {
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "typeormmodule",
        {
          _index: 325,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "typeormmodule.forfeature([todo",
        { _index: 499, title: {}, body: { "modules/TodosModule.html": {} } },
      ],
      [
        "typeormmodule.forfeature([user",
        { _index: 575, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "typeormmodule.forrootasync",
        { _index: 331, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "types",
        {
          _index: 419,
          title: {},
          body: {
            "classes/LoginDto.html": {},
            "classes/UpdateTodoDto.html": {},
            "classes/UpdateUserDto.html": {},
            "dependencies.html": {},
          },
        },
      ],
      ["typescript", { _index: 671, title: {}, body: { "index.html": {} } }],
      [
        "unauthorized",
        {
          _index: 87,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        "unauthorizedexception",
        {
          _index: 65,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        'unauthorizedexception("authorization',
        {
          _index: 178,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "unexpected",
        {
          _index: 180,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "unique",
        { _index: 514, title: {}, body: { "entities/User.html": {} } },
      ],
      ["unit", { _index: 684, title: {}, body: { "index.html": {} } }],
      [
        "unknown",
        {
          _index: 58,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/JwtAuthGuard.html": {},
            "injectables/PasswordProvider.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "up",
        {
          _index: 535,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "up.dto",
        {
          _index: 67,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/LoginDto.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "up.dto.ts",
        {
          _index: 440,
          title: {},
          body: { "classes/SignUpDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "up.dto.ts:18",
        { _index: 457, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "updatetododto",
        {
          _index: 500,
          title: { "classes/UpdateTodoDto.html": {} },
          body: { "classes/UpdateTodoDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "updateuserdto",
        {
          _index: 504,
          title: { "classes/UpdateUserDto.html": {} },
          body: { "classes/UpdateUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "uppercase",
        { _index: 451, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      ["use", { _index: 738, title: {}, body: { "license.html": {} } }],
      [
        "used",
        {
          _index: 558,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      [
        "usefactory",
        { _index: 333, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "useguards",
        {
          _index: 485,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "useguards(jwtauthguard",
        {
          _index: 487,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      [
        "user",
        {
          _index: 81,
          title: { "entities/User.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/JwtAuthGuard.html": {},
            "classes/JwtStrategy.html": {},
            "entities/Todo.html": {},
            "entities/User.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "user.dto",
        {
          _index: 461,
          title: {},
          body: {
            "classes/SignUpDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "user.dto.ts",
        {
          _index: 216,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/UpdateUserDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "user.dto.ts:10",
        { _index: 220, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.dto.ts:13",
        { _index: 225, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.dto.ts:8",
        { _index: 221, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.id",
        {
          _index: 194,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "user.name",
        {
          _index: 196,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "user.service",
        { _index: 574, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "user.todos",
        { _index: 473, title: {}, body: { "entities/Todo.html": {} } },
      ],
      [
        "username",
        {
          _index: 195,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "userrepository",
        {
          _index: 523,
          title: {},
          body: { "injectables/UserService.html": {} },
        },
      ],
      ["users", { _index: 799, title: {}, body: { "properties.html": {} } }],
      [
        "users/dto/login.dto",
        {
          _index: 70,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
          },
        },
      ],
      [
        "users/dto/sign",
        {
          _index: 66,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
          },
        },
      ],
      [
        "users/entity/user",
        {
          _index: 156,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/JwtStrategy.html": {},
            "entities/Todo.html": {},
          },
        },
      ],
      [
        "users/user.service",
        {
          _index: 155,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "users/users.module",
        {
          _index: 29,
          title: {},
          body: { "modules/AppModule.html": {}, "modules/AuthModule.html": {} },
        },
      ],
      [
        "userservice",
        {
          _index: 135,
          title: { "injectables/UserService.html": {} },
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usersmodule",
        {
          _index: 16,
          title: { "modules/UsersModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usevalue",
        {
          _index: 309,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "using",
        {
          _index: 262,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordProvider.html": {},
          },
        },
      ],
      [
        "validate",
        {
          _index: 307,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "classes/JwtStrategy.html": {},
          },
        },
      ],
      [
        "validate(payload",
        { _index: 406, title: {}, body: { "classes/JwtStrategy.html": {} } },
      ],
      [
        "validated",
        { _index: 369, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "validateenv",
        {
          _index: 299,
          title: {},
          body: {
            "modules/ConfigurationModule.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validateenv(config",
        {
          _index: 366,
          title: {},
          body: {
            "classes/EnvValidations.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validatenested",
        {
          _index: 211,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
          },
        },
      ],
      [
        "validatesync",
        { _index: 360, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "validatesync(validated",
        { _index: 372, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "validateusercredentials",
        {
          _index: 132,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "validateusercredentials(logindto",
        {
          _index: 147,
          title: {},
          body: { "injectables/AuthService.html": {} },
        },
      ],
      [
        "validation",
        { _index: 378, title: {}, body: { "classes/EnvValidations.html": {} } },
      ],
      [
        "validationoptions",
        {
          _index: 656,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "validationpipe",
        {
          _index: 297,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      [
        "validator",
        {
          _index: 212,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/EnvValidations.html": {},
            "classes/SignUpDto.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "value",
        {
          _index: 149,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["variable", { _index: 594, title: {}, body: { "coverage.html": {} } }],
      [
        "variables",
        {
          _index: 244,
          title: { "miscellaneous/variables.html": {} },
          body: {
            "injectables/BcryptProvider.html": {},
            "classes/EnvValidations.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["vercel", { _index: 641, title: {}, body: { "dependencies.html": {} } }],
      ["version", { _index: 793, title: {}, body: { "properties.html": {} } }],
      [
        "via",
        {
          _index: 491,
          title: {},
          body: { "controllers/TodoListController.html": {} },
        },
      ],
      ["warranties", { _index: 763, title: {}, body: { "license.html": {} } }],
      ["warranty", { _index: 759, title: {}, body: { "license.html": {} } }],
      ["watch", { _index: 679, title: {}, body: { "index.html": {} } }],
      [
        "webpack",
        { _index: 622, title: {}, body: { "dependencies.html": {} } },
      ],
      ["website", { _index: 711, title: {}, body: { "index.html": {} } }],
      ["whether", { _index: 776, title: {}, body: { "license.html": {} } }],
      [
        "whitelist",
        {
          _index: 310,
          title: {},
          body: { "modules/ConfigurationModule.html": {} },
        },
      ],
      ["without", { _index: 733, title: {}, body: { "license.html": {} } }],
      ["yarn", { _index: 674, title: {}, body: { "index.html": {} } }],
      [
        "yes",
        {
          _index: 657,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      ["you'd", { _index: 700, title: {}, body: { "index.html": {} } }],
      [
        "zoom",
        {
          _index: 17,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/TodosModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
    ],
    pipeline: ["stemmer"],
  },
  store: {
    "modules/AppModule.html": {
      url: "modules/AppModule.html",
      title: "module - AppModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nTodosModule\n\nTodosModule\n\nAppModule -->\n\nTodosModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            TodosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { ConfigurationModule } from "./configuration/configuration.module";\nimport { DatabaseModule } from "./database/database.module";\nimport { UsersModule } from "./users/users.module";\nimport { TodosModule } from "./todos/todos.module";\nimport { AuthModule } from "./auth/auth.module";\n\n@Module({\n  imports: [\n    ConfigurationModule,\n    DatabaseModule,\n    UsersModule,\n    TodosModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/AuthController.html": {
      url: "controllers/AuthController.html",
      title: "controller - AuthController",
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                registration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'login\')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registration\n                        \n                    \n                \n            \n            \n                \n                        \n                    registration(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'register\')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UnauthorizedException } from "@nestjs/common";\n\nimport { SignUpDto } from "../users/dto/sign-up.dto";\nimport { AuthService } from "./auth.service";\nimport { LoginDto } from "../users/dto/login.dto";\n\n@Controller("auth")\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post("register")\n  registration(@Body() signUpDto: SignUpDto) {\n    return this.authService.register(signUpDto);\n  }\n\n  @Post("login")\n  async login(@Body() loginDto: LoginDto) {\n    const user = await this.authService.validateUserCredentials(loginDto);\n    if (!user) {\n      throw new UnauthorizedException({ message: "Unauthorized" });\n    }\n    return this.authService.generateTokenAndLogin(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/AuthModule.html": {
      url: "modules/AuthModule.html",
      title: "module - AuthModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nAuthModule -->\n\nBcryptProvider->AuthModule\n\n\n\n\n\nPasswordProvider\n\nPasswordProvider\n\nAuthModule -->\n\nPasswordProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            BcryptProvider\n                        \n                        \n                            PasswordProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { AuthController } from "./auth.controller";\nimport { UsersModule } from "../users/users.module";\nimport { AuthService } from "./auth.service";\nimport { PasswordProvider } from "./password/password.provider";\nimport { BcryptProvider } from "./password/bcrypt.provider";\nimport { JwtModule } from "@nestjs/jwt";\nimport { jwtConfig } from "../configuration/jwt/jwt-config";\nimport { JwtAuthGuard } from "./passport-jwt/jwt-auth.guard";\nimport { PassportModule } from "@nestjs/passport";\nimport { JwtStrategy } from "./passport-jwt/jwt.strategy";\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({ defaultStrategy: "jwt" }), // Register JWT as default strategy\n    JwtModule.register({\n      secret: jwtConfig.secret,\n      signOptions: { expiresIn: jwtConfig.expireIn },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    PasswordProvider,\n    BcryptProvider,\n    JwtAuthGuard,\n    JwtStrategy,\n  ],\n  exports: [JwtAuthGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/AuthService.html": {
      url: "injectables/AuthService.html",
      title: "injectable - AuthService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                generateTokenAndLogin\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUserCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, passwordProvider: PasswordProvider, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordProvider\n                                                  \n                                                        \n                                                                        PasswordProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTokenAndLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokenAndLogin(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(signUpDto: SignUpDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUserCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUserCredentials(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger("AuthService")\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n  UnauthorizedException,\n} from "@nestjs/common";\nimport { SignUpDto } from "../users/dto/sign-up.dto";\nimport { UserService } from "../users/user.service";\nimport { PasswordProvider } from "./password/password.provider";\n\nimport { User } from "../users/entity/user-entity";\nimport { JwtService } from "@nestjs/jwt";\nimport { LoginDto } from "../users/dto/login.dto";\n\n@Injectable()\nexport class AuthService {\n  private readonly logger: Logger = new Logger("AuthService");\n  constructor(\n    private readonly userService: UserService,\n    private readonly passwordProvider: PasswordProvider,\n    private readonly jwtService: JwtService\n  ) {}\n\n  async register(signUpDto: SignUpDto) {\n    // hash the password\n\n    const hashedPassword: string = await this.passwordProvider.hashPassword(\n      signUpDto.password\n    );\n\n    if (!hashedPassword) {\n      throw new UnauthorizedException({ message: "Invalid password" });\n    }\n    // create new user with hashedPassword\n    const newUser: User = await this.userService.createNew({\n      ...signUpDto,\n      password: hashedPassword,\n    });\n    if (!newUser) {\n      this.logger.log("Failed to create a new user");\n      throw new HttpException(\n        "Invalid password",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n    // generate the token\n    return await this.generateTokenAndLogin(newUser);\n  }\n\n  async findUserById(id: number): Promise {\n    try {\n      return await this.userService.findOneById(id);\n    } catch (error) {\n      if (\n        error instanceof NotFoundException ||\n        error instanceof InternalServerErrorException\n      ) {\n        throw new UnauthorizedException("authorization denied");\n      }\n      throw new InternalServerErrorException(\n        "An unexpected error occurred while checking user existence."\n      );\n    }\n  }\n\n  async validateUserCredentials(loginDto: LoginDto): Promise {\n    const storedUser: User | null = await this.userService.findUserByEmail(\n      loginDto.email\n    );\n    if (!storedUser) {\n      return null;\n    }\n    const isValidPassword = await this.passwordProvider.comparePassword(\n      loginDto.password,\n      storedUser.password\n    );\n    if (!isValidPassword) {\n      return null;\n    }\n    return storedUser;\n  }\n\n  async generateTokenAndLogin(user: User): Promise {\n    const payload = { sub: user.id, username: user.name };\n    return {\n      token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BaseTodoDto.html": {
      url: "classes/BaseTodoDto.html",
      title: "class - BaseTodoDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/base-todo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    Readonly\n                                title\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/base-todo.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/base-todo.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/base-todo.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from "../../users/entity/user-entity";\nimport { IsNonEmptyString } from "../../common/decorators/non-empty-string";\nimport { ValidateNested } from "class-validator";\nimport { Type } from "class-transformer";\n\nexport class BaseTodoDto {\n  @IsNonEmptyString()\n  readonly title: string;\n  @IsNonEmptyString()\n  readonly description: string;\n  @Type(() => User)\n  @ValidateNested()\n  readonly user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BaseUserDto.html": {
      url: "classes/BaseUserDto.html",
      title: "class - BaseUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/base-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNonEmptyString } from "../../common/decorators/non-empty-string";\nimport { Todo } from "../../todos/entity/todo-entity";\nimport { Type } from "class-transformer";\nimport { IsEmail, ValidateNested } from "class-validator";\n\nexport class BaseUserDto {\n  @IsNonEmptyString()\n  readonly name: string;\n  @IsEmail()\n  readonly email: string;\n  @Type(() => Todo)\n  @ValidateNested({ each: true })\n  readonly todos: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/BcryptProvider.html": {
      url: "injectables/BcryptProvider.html",
      title: "injectable - BcryptProvider",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/password/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                BcryptProvider class that implements HashAlgoInterface for hashing and comparing passwords.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/password/bcrypt.provider.ts:23\n                            \n                        \n\n                \n                    \n                            Creates a new instance of BcryptProvider.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service to access configuration variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password/bcrypt.provider.ts:42\n                        \n                    \n\n\n            \n                \n                        Compares the given data with the encrypted password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text or buffer to compare.\n\n\n                                            \n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hashed password to compare against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nTrue if the data matches the encrypted value.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password/bcrypt.provider.ts:61\n                        \n                    \n\n\n            \n                \n                        Asynchronously hashes the provided data using bcrypt with a dynamically generated salt based on the configured number of salt rounds.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text or buffer data to be hashed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves with the hashed data.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("HashAlgoProvider")\n                    \n                \n                    \n                        \n                                Defined in src/auth/password/bcrypt.provider.ts:23\n                        \n                    \n\n            \n                \n                    Logger instance for error tracking and debugging.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Default value : parseInt(process.env.SALT_ROUNDS)\n                    \n                \n                    \n                        \n                                Defined in src/auth/password/bcrypt.provider.ts:34\n                        \n                    \n\n            \n                \n                    Number of salt rounds for bcrypt hashing.\nThis value is fetched from the environment configuration.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HashAlgoInterface } from "./hash-algo.interface";\nimport * as bcrypt from "bcrypt";\nimport {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from "@nestjs/common";\nimport { ConfigService } from "@nestjs/config";\n\n/**\n * BcryptProvider class that implements HashAlgoInterface for hashing and comparing passwords.\n * @constructor\n * @param {ConfigService} configService - The configuration service for retrieving salt rounds.\n * @method compare - Compares a plain text password with an encrypted password.\n * @method hash - Hashes a plain text password.\n */\n@Injectable()\nexport class BcryptProvider implements HashAlgoInterface {\n  /**\n   * Logger instance for error tracking and debugging.\n   * @private\n   */\n  private readonly logger = new Logger("HashAlgoProvider");\n  /**\n   * Creates a new instance of BcryptProvider.\n   * @param {ConfigService} configService - The service to access configuration variables.\n   */\n  constructor(private readonly configService: ConfigService) {}\n  /**\n   * Number of salt rounds for bcrypt hashing.\n   * This value is fetched from the environment configuration.\n   * @private\n   */\n  private readonly saltRounds = parseInt(process.env.SALT_ROUNDS);\n  /**\n   * Compares the given data with the encrypted password.\n   * @param {string | Buffer} data - The plain text or buffer to compare.\n   * @param {string} encrypted - The hashed password to compare against.\n   * @returns {Promise} - True if the data matches the encrypted value.\n   * @throws {InternalServerErrorException} If the comparison fails.\n   */\n  async compare(data: string | Buffer, encrypted: string): Promise {\n    try {\n      return await bcrypt.compare(data, encrypted);\n    } catch (error) {\n      this.logger.error(`${error.code}, ${error.message}`);\n      this.logger.error(error.stack);\n      throw new InternalServerErrorException({\n        message: "Failed to compare passwords",\n      });\n    }\n  }\n\n  /**\n   * Asynchronously hashes the provided data using bcrypt with a dynamically generated salt based on the configured number of salt rounds.\n   *\n   * @param {string | Buffer} data - The plain text or buffer data to be hashed.\n   * @returns {Promise} A promise that resolves with the hashed data.\n   * @throws {InternalServerErrorException} If an error occurs during the hashing process.\n   */\n  async hash(data: string | Buffer): Promise {\n    try {\n      const salt = await bcrypt.genSalt(this.saltRounds);\n      return await bcrypt.hash(data, salt);\n    } catch (error) {\n      this.logger.error(`${error.code}, ${error.message}`);\n      this.logger.error(error.stack);\n      throw new InternalServerErrorException({\n        message: "Failed to hash passwords",\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/ConfigurationModule.html": {
      url: "modules/ConfigurationModule.html",
      title: "module - ConfigurationModule",
      body: '\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from "@nestjs/common";\nimport { ConfigModule } from "@nestjs/config";\nimport { validateEnv } from "./environements/env.validations";\nimport { APP_PIPE } from "@nestjs/core";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: ".env",\n      isGlobal: true,\n      validate: validateEnv,\n    }),\n  ],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n        forbidNonWhitelisted: true,\n        transform: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    },\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/CreateTodoDto.html": {
      url: "classes/CreateTodoDto.html",
      title: "class - CreateTodoDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/create-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseTodoDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    Readonly\n                                title\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:13\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseTodoDto } from "./base-todo.dto";\n\nexport class CreateTodoDto extends BaseTodoDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/DatabaseModule.html": {
      url: "modules/DatabaseModule.html",
      title: "module - DatabaseModule",
      body: '\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { ConfigModule, ConfigService } from "@nestjs/config";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport {\n  getDevDatabaseConfig,\n  getDevDataSourceFactory,\n} from "../configuration/database/dev-database.config";\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: getDevDatabaseConfig,\n      dataSourceFactory: getDevDataSourceFactory,\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/EnvValidations.html": {
      url: "classes/EnvValidations.html",
      title: "class - EnvValidations",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvValidations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/environements/env.validations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                APP_URL_PREFIX\n                            \n                            \n                                    \n                                CODECOV_TOKEN\n                            \n                            \n                                    \n                                DATASOURCE_DATABASE\n                            \n                            \n                                    \n                                DATASOURCE_HOST\n                            \n                            \n                                    \n                                DATASOURCE_PASSWORD\n                            \n                            \n                                    \n                                DATASOURCE_PORT\n                            \n                            \n                                    \n                                DATASOURCE_USERNAME\n                            \n                            \n                                    \n                                JWT_SECRET\n                            \n                            \n                                    \n                                SALT_ROUNDS\n                            \n                            \n                                    \n                                SWAGGER_PATH\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositiveInteger()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        APP_URL_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        CODECOV_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        DATASOURCE_DATABASE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        DATASOURCE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        DATASOURCE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        DATASOURCE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositiveInteger()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        DATASOURCE_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositiveInteger()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        SWAGGER_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/configuration/environements/env.validations.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { validateSync } from "class-validator";\n\nimport { plainToInstance } from "class-transformer";\nimport { InternalServerErrorException, Logger } from "@nestjs/common";\nimport { IsNonEmptyString } from "../../common/decorators/non-empty-string";\nimport { IsPositiveInteger } from "../../common/decorators/is-positive-integer";\n\nexport class EnvValidations {\n  @IsNonEmptyString()\n  CODECOV_TOKEN: string;\n  @IsNonEmptyString()\n  DATASOURCE_USERNAME: string;\n  @IsNonEmptyString()\n  DATASOURCE_PASSWORD: string;\n  @IsNonEmptyString()\n  DATASOURCE_DATABASE: string;\n  @IsNonEmptyString()\n  DATASOURCE_HOST: string;\n  @IsPositiveInteger()\n  DATASOURCE_PORT: number;\n  @IsNonEmptyString()\n  APP_URL_PREFIX: string;\n  @IsPositiveInteger()\n  APP_PORT: number;\n  @IsNonEmptyString()\n  SWAGGER_PATH: string;\n  @IsPositiveInteger()\n  SALT_ROUNDS: number;\n  @IsNonEmptyString()\n  JWT_SECRET: string;\n}\n\nexport function validateEnv(config: Record) {\n  const logger = new Logger("EnvValidations");\n\n  const validated = plainToInstance(EnvValidations, config, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validated, {\n    skipMissingProperties: false,\n  });\n  if (errors.length > 0) {\n    logger.log(`${errors.length} variables failed validation process 🤬`);\n    throw new InternalServerErrorException();\n  }\n  logger.log(`🤘 All Environments variables were successfully loaded `);\n  return validated;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/HashAlgoInterface.html": {
      url: "interfaces/HashAlgoInterface.html",
      title: "interface - HashAlgoInterface",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HashAlgoInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/password/hash-algo.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        compare\n                                    \n                                \n                                \n                                    \n                                        hash\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password/hash-algo.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n            \n                \nhash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password/hash-algo.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface HashAlgoInterface {\n  hash(data: string | Buffer): Promise;\n  compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/IdDto.html": {
      url: "classes/IdDto.html",
      title: "class - IdDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositiveInteger()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id-dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositiveInteger } from "../decorators/is-positive-integer";\n\nexport class IdDto {\n  @IsPositiveInteger()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/JwtAuthGuard.html": {
      url: "classes/JwtAuthGuard.html",
      title: "class - JwtAuthGuard",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport-jwt/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard("jwt")\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/passport-jwt/jwt-auth.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from "@nestjs/passport";\nimport { UnauthorizedException } from "@nestjs/common";\n\nexport class JwtAuthGuard extends AuthGuard("jwt") {\n  handleRequest(err: unknown, user) {\n    if (err || !user) {\n      throw new UnauthorizedException({ message: "Unauthorized" });\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/JwtStrategy.html": {
      url: "classes/JwtStrategy.html",
      title: "class - JwtStrategy",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport-jwt/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport-jwt/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/passport-jwt/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from "@nestjs/passport";\nimport { ExtractJwt, Strategy } from "passport-jwt";\nimport { jwtConfig } from "../../configuration/jwt/jwt-config";\nimport { User } from "../../users/entity/user-entity";\nimport { AuthService } from "../auth.service";\nimport { UnauthorizedException } from "@nestjs/common";\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: jwtConfig.secret,\n    });\n  }\n\n  async validate(payload: any): Promise {\n    const user: User | null = await this.authService.findUserById(payload.sub);\n    if (!user) {\n      throw new UnauthorizedException({ message: "Unauthorized" });\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/LoginDto.html": {
      url: "classes/LoginDto.html",
      title: "class - LoginDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(SignUpDto, ["name", "todos"])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from "@nestjs/mapped-types";\nimport { SignUpDto } from "./sign-up.dto";\n\nexport class LoginDto extends OmitType(SignUpDto, ["name", "todos"]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/PasswordProvider.html": {
      url: "injectables/PasswordProvider.html",
      title: "injectable - PasswordProvider",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/password/password.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bcrypt: BcryptProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/password/password.provider.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bcrypt\n                                                  \n                                                        \n                                                                        BcryptProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password/password.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password/password.provider.ts:21\n                        \n                    \n\n\n            \n                \n                        Asynchronously hashes the provided data using bcrypt.\nNote: The bcrypt. Hash method actually implements error handling internally, so additional error handling is not required in this method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text or buffer data to be hashed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves with the hashed data.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BcryptProvider } from "./bcrypt.provider";\nimport { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class PasswordProvider {\n  constructor(private readonly bcrypt: BcryptProvider) {}\n\n  async comparePassword(data: string | Buffer, encrypted: string) {\n    return await this.bcrypt.compare(data, encrypted);\n  }\n\n  /**\n   * Asynchronously hashes the provided data using bcrypt.\n   *\n   * @param {string | Buffer} data - The plain text or buffer data to be hashed.\n   * @returns {Promise} A promise that resolves with the hashed data.\n   * @throws {InternalServerErrorException} If an error occurs during the hashing process.\n   *\n   * Note: The bcrypt. Hash method actually implements error handling internally, so additional error handling is not required in this method.\n   */\n  async hashPassword(data: string | Buffer): Promise {\n    return await this.bcrypt.hash(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/SignUpDto.html": {
      url: "classes/SignUpDto.html",
      title: "class - SignUpDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/sign-up.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsStrongPassword({minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1}, {message: \'Password must be at least 8 characters long and include uppercase, lowercase, number, and special character. Example: PassWord@@201\'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/sign-up.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNonEmptyString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:13\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseUserDto } from "./base-user.dto";\nimport { IsStrongPassword } from "class-validator";\n\nexport class SignUpDto extends BaseUserDto {\n  @IsStrongPassword(\n    {\n      minLength: 8,\n      minLowercase: 1,\n      minUppercase: 1,\n      minNumbers: 1,\n      minSymbols: 1,\n    },\n    {\n      message:\n        "Password must be at least 8 characters long and include uppercase, lowercase, number, and special character. Example: PassWord@@201",\n    }\n  )\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "entities/Todo.html": {
      url: "entities/Todo.html",
      title: "entity - Todo",
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  Todo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/entity/todo-entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entity/todo-entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entity/todo-entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entity/todo-entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.todos, {onDelete: \'CASCADE\'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entity/todo-entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from "typeorm";\nimport { User } from "../../users/entity/user-entity";\n\n@Entity("todos")\nexport class Todo {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  title: string;\n  @Column()\n  description: string;\n  @ManyToOne(() => User, (user) => user.todos, { onDelete: "CASCADE" })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/TodoListController.html": {
      url: "controllers/TodoListController.html",
      title: "controller - TodoListController",
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  TodoListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/todo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                newTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    newTask(createTodoDto: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todo.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from "@nestjs/common";\nimport { JwtAuthGuard } from "src/auth/passport-jwt/jwt-auth.guard";\nimport { CreateTodoDto } from "./dto/create-todo.dto";\n\n@UseGuards(JwtAuthGuard)\n@Controller("todos")\nexport class TodoListController {\n  @Post()\n  newTask(@Body() createTodoDto: CreateTodoDto) {\n    return `this will create new Todo $${JSON.stringify(createTodoDto)} via protected  route by JWT`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/TodosModule.html": {
      url: "modules/TodosModule.html",
      title: "module - TodosModule",
      body: '\n                   \n\n\n\n\n    Modules\n    TodosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTodosModule\n\nTodosModule\n\nTodosModule -->\n\nAuthModule->TodosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/todos/todos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TodoListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { Todo } from "./entity/todo-entity";\nimport { TodoListController } from "./todo.controller";\nimport { AuthModule } from "../auth/auth.module";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Todo]), AuthModule],\n  controllers: [TodoListController],\n})\nexport class TodosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/UpdateTodoDto.html": {
      url: "classes/UpdateTodoDto.html",
      title: "class - UpdateTodoDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/update-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTodoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from "@nestjs/mapped-types";\nimport { CreateTodoDto } from "./create-todo.dto";\n\nexport class UpdateTodoDto extends PartialType(CreateTodoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/UpdateUserDto.html": {
      url: "classes/UpdateUserDto.html",
      title: "class - UpdateUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(BaseUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from "@nestjs/mapped-types";\nimport { BaseUserDto } from "./base-user.dto";\n\nexport class UpdateUserDto extends PartialType(BaseUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "entities/User.html": {
      url: "entities/User.html",
      title: "entity - User",
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user-entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from "typeorm";\nimport { Todo } from "../../todos/entity/todo-entity";\n\n@Entity("users")\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n  @Column({ unique: true })\n  email: string;\n  @Column()\n  password: string;\n  @OneToMany(() => Todo, (todo) => todo.user)\n  todos: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/UserService.html": {
      url: "injectables/UserService.html",
      title: "injectable - UserService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNew\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                IsEmailUsed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createNew\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNew(signUpDto: SignUpDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new user based on the provided SignUpDto.\nOtherwise, it logs the error details and throws an HttpException indicating the failure to save the new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The data transfer object containing user details for sign-up.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves with the newly created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        IsEmailUsed\n                        \n                    \n                \n            \n            \n                \n                        \n                    IsEmailUsed(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("UserService")\n                    \n                \n                    \n                        \n                                Defined in src/users/user.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n} from "@nestjs/common";\nimport { InjectRepository } from "@nestjs/typeorm";\nimport { User } from "./entity/user-entity";\nimport { QueryFailedError, Repository } from "typeorm";\nimport { SignUpDto } from "./dto/sign-up.dto";\n\n@Injectable()\nexport class UserService {\n  private readonly logger = new Logger("UserService");\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * Creates a new user based on the provided SignUpDto.\n   *\n   * @param signUpDto The data transfer object containing user details for sign-up.\n   * @returns A promise that resolves with the newly created user.\n   * @throws If there is an error during the creation process, it handles QueryFailedError by throwing an InternalServerErrorException with a specific message.\n   * Otherwise, it logs the error details and throws an HttpException indicating the failure to save the new user.\n   */\n  async createNew(signUpDto: SignUpDto) {\n    try {\n      const user = this.userRepository.create(signUpDto);\n      return await this.userRepository.save(user);\n    } catch (error) {\n      if (error instanceof QueryFailedError) {\n        this.logger.log(error.message);\n        throw new InternalServerErrorException({\n          message: "The email your provided is already used 😂",\n        });\n      }\n      this.logger.error(`${error.code}, ${error.message}`);\n      this.logger.error(error.stack);\n      throw new HttpException(\n        "Failed to save new user",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  async IsEmailUsed(email: string): Promise {\n    try {\n      const count: number = await this.userRepository.count({\n        where: { email },\n      });\n      return count > 0;\n    } catch (error) {\n      console.log(error.code);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async findOneById(id: number): Promise {\n    try {\n      return await this.userRepository.findOneBy({ id: id });\n    } catch (error) {\n      if (error instanceof QueryFailedError) {\n        this.logger.log(`${error.stack}, ${error.message}`);\n        this.logger.log(\n          `Failed to find user with provided id: Cause : ${error.message.toString()}`\n        );\n        throw new NotFoundException({ "User not found": error.message });\n      }\n      throw new InternalServerErrorException("Failed to find user");\n    }\n  }\n\n  async findUserByEmail(email: string): Promise {\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n      if (!user) {\n        return null;\n      }\n      return user;\n    } catch (error) {\n      if (error instanceof QueryFailedError) {\n        this.logger.log(`${error.stack}, ${error.message}`);\n        throw new NotFoundException({ "User not found": error.message });\n      }\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/UsersModule.html": {
      url: "modules/UsersModule.html",
      title: "module - UsersModule",
      body: '\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { User } from "./entity/user-entity";\nimport { UserService } from "./user.service";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "coverage.html": {
      url: "coverage.html",
      title: "coverage - coverage",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/passport-jwt/jwt-auth.guard.ts\n            \n            class\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/passport-jwt/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/password/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/auth/password/hash-algo.interface.ts\n            \n            interface\n            HashAlgoInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/password/password.provider.ts\n            \n            injectable\n            PasswordProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/decorators/is-positive-integer.ts\n            \n            function\n            IsPositiveInteger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/non-empty-string.ts\n            \n            function\n            IsNonEmptyString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/id-dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/configuration/database/dev-database.config.ts\n            \n            variable\n            getDevDatabaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configuration/database/dev-database.config.ts\n            \n            variable\n            getDevDataSourceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configuration/environements/env.validations.ts\n            \n            class\n            EnvValidations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/configuration/environements/env.validations.ts\n            \n            function\n            validateEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configuration/jwt/jwt-config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/dto/base-todo.dto.ts\n            \n            class\n            BaseTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/todos/dto/create-todo.dto.ts\n            \n            class\n            CreateTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/todos/dto/update-todo.dto.ts\n            \n            class\n            UpdateTodoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/entity/todo-entity.ts\n            \n            entity\n            Todo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/todo.controller.ts\n            \n            controller\n            TodoListController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/base-user.dto.ts\n            \n            class\n            BaseUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entity/user-entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.service.ts\n            \n            injectable\n            UserService\n            \n                14 %\n                (1/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "dependencies.html": {
      url: "dependencies.html",
      title: "package-dependencies - dependencies",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            fork-ts-checker-webpack-plugin : ^9.0.2\n        \n            neonctl : ^1.37.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            run-script-webpack-plugin : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            terser-webpack-plugin : ^5.3.10\n        \n            typeorm : ^0.3.20\n        \n            vercel : ^37.6.0\n        \n            webpack : ^5.95.0\n        \n            webpack-cli : ^5.1.4\n        \n            webpack-node-externals : ^3.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/functions.html": {
      url: "miscellaneous/functions.html",
      title: "miscellaneous-functions - functions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsNonEmptyString   (src/.../non-empty-string.ts)\n                        \n                        \n                            IsPositiveInteger   (src/.../is-positive-integer.ts)\n                        \n                        \n                            validateEnv   (src/.../env.validations.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/decorators/non-empty-string.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNonEmptyString\n                        \n                    \n                \n            \n            \n                \nIsNonEmptyString(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/decorators/is-positive-integer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPositiveInteger\n                        \n                    \n                \n            \n            \n                \nIsPositiveInteger(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/configuration/environements/env.validations.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateEnv\n                        \n                    \n                \n            \n            \n                \nvalidateEnv(config: Record)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "index.html": {
      url: "index.html",
      title: "getting-started - index",
      body: '\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "license.html": {
      url: "license.html",
      title: "getting-started - license",
      body: '\n                   \n\nMIT License\nCopyright (c) 2024 Jordach Makaya\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules.html": {
      url: "modules.html",
      title: "modules - modules",
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "overview.html": {
      url: "overview.html",
      title: "overview - overview",
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTodosModule\n\nTodosModule\n\nTodosModule -->\n\nAuthModule->TodosModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nTodosModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nAuthModule -->\n\nBcryptProvider->AuthModule\n\n\n\n\n\nPasswordProvider\n\nPasswordProvider\n\nAuthModule -->\n\nPasswordProvider->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "properties.html": {
      url: "properties.html",
      title: "package-properties - properties",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Build a RESTful API to allow users to manage their to-do list.\n        \n            License : MIT\n        \n            Author : Jordach Makaya\n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/variables.html": {
      url: "miscellaneous/variables.html",
      title: "miscellaneous-variables - variables",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getDevDatabaseConfig   (src/.../dev-database.config.ts)\n                        \n                        \n                            getDevDataSourceFactory   (src/.../dev-database.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt-config.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configuration/database/dev-database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDevDatabaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  configService: ConfigService\n): Promise => ({\n  type: "postgres",\n  host: configService.get("DATASOURCE_HOST"),\n  port: configService.get("DATASOURCE_PORT"),\n  username: configService.get("DATASOURCE_USERNAME"),\n  password: configService.get("DATASOURCE_PASSWORD"),\n  database: configService.get("DATASOURCE_DATABASE"),\n  entities: [User, Todo],\n  synchronize: configService.get("DATASOURCE_SYNCHRONIZATION"),\n  logging: configService.get("DATASOURCE_LOGGING"),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDevDataSourceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (options) => {\n  const logger = new Logger("Database Config");\n  if (!options) {\n    logger.fatal("🤬 Options must be provided for database in ModuleConfig");\n    throw new Error("DataSourceOption not provided");\n  }\n  const dataSource = new DataSource(options);\n  await dataSource.initialize();\n  logger.log("🤘 Connection with Dev Database successfully established");\n  return dataSource;\n}\n                    \n                \n\n\n        \n    \n\n    src/configuration/jwt/jwt-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n  expireIn: process.env.JWT_TOKEN_EXPIRE_IN,\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
